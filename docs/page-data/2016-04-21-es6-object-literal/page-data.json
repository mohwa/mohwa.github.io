{
    "componentChunkName": "component---src-templates-blog-post-js",
    "path": "/2016-04-21-es6-object-literal/",
    "result": {"data":{"site":{"siteMetadata":{"title":"Mohwa Blog"}},"markdownRemark":{"id":"29bc144f-dcfc-55cf-bc8d-33d1dbaa0eb5","excerpt":"1. 글에 대해 모든 결과는 Chrome 브라우저를 통해 테스트된 결과입니다. 2. object initializer 객체 초기화(or 생성)를 위한 표현법(or 식)으로 아래와 같은 것들이 존재한다. new Object(), Object.create(), Object Literal…","html":"<h2>1. 글에 대해</h2>\n<ul>\n<li>모든 결과는 <strong>Chrome 브라우저</strong>를 통해 테스트된 결과입니다.</li>\n</ul>\n<h2>2. object initializer</h2>\n<ul>\n<li>\n<p>객체 <span style=\"color:#c11f1f\">초기화</span>(or 생성)를 위한 표현법(or 식)으로 아래와 같은 것들이 존재한다.</p>\n<ul>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\">new Object()</a>, <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/create\">Object.create()</a>, Object Literal</li>\n</ul>\n</li>\n</ul>\n<h2>3. <span style=\"color:#c11f1f\">ES5</span> &#x26; <span style=\"color:#c11f1f\">Object Initializer</span></h2>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// 'use strict';</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> o <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>x<span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> y<span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token function-variable function\">z</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">var</span> x <span class=\"token operator\">=</span> o<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">,</span> y <span class=\"token operator\">=</span> o<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">,</span> z <span class=\"token operator\">=</span> o<span class=\"token punctuation\">.</span>z<span class=\"token punctuation\">;</span>\n\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">,</span> z<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 1 2 function(){}</span>\n\n    <span class=\"token comment\">// 변수 선언(및 할당)과 동시에, 객체 property 값을 초기화할 수 있다.</span>\n    <span class=\"token keyword\">var</span> o2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>x<span class=\"token operator\">:</span> _x <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> y<span class=\"token operator\">:</span> _y <span class=\"token operator\">=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 단 \"Strict Mode\" 에서는 아래와 같은 예외가 발생하게된다.(주의!!)</span>\n    <span class=\"token comment\">// Uncaught ReferenceError: _x is not defined</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>o2<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">,</span> o2<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 3 4</span>\n\n    <span class=\"token comment\">// ES5 에서는 Object.defineProperty 를 통해서만, 접근자를 생성할 수 있다.</span>\n    <span class=\"token keyword\">var</span> o4 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// id 접근자를 생성한다.</span>\n    Object<span class=\"token punctuation\">.</span><span class=\"token function\">defineProperty</span><span class=\"token punctuation\">(</span>o4<span class=\"token punctuation\">,</span> <span class=\"token string\">'id'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n        value<span class=\"token operator\">:</span> <span class=\"token string\">''</span><span class=\"token punctuation\">,</span>\n        <span class=\"token comment\">// 접근자 property 에 수정 권한을 준다.(기본 값: false)</span>\n        writable<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n        <span class=\"token keyword\">get</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> id<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token keyword\">set</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">v</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            id <span class=\"token operator\">=</span> v<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>o4<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ''</span>\n\n    o4<span class=\"token punctuation\">.</span>id <span class=\"token operator\">=</span> <span class=\"token string\">'yanione'</span><span class=\"token punctuation\">;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>o4<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// yanione</span>\n\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>o4<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2>4. <span style=\"color:#c11f1f\">ES6</span> &#x26; <span style=\"color:#c11f1f\">Object Initializer</span></h2>\n<ul>\n<li>\n<p>기본적인 사용 방법</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 선언된 변수명과 동일한 객체 property 명을 사용할 경우, 아래와 같이 표현할 수 있다.</span>\n    <span class=\"token keyword\">let</span> x <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> y <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token function-variable function\">z</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> __proto__ <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// property 할당 문법이 보다 간결해졌다.</span>\n    <span class=\"token keyword\">let</span> o <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">,</span> z<span class=\"token punctuation\">,</span> __proto__<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>o<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">,</span> o<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">,</span> o<span class=\"token punctuation\">.</span>z<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 1 2 function(){}</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>o<span class=\"token punctuation\">.</span>__proto__<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// null</span>\n\n    <span class=\"token comment\">// ES6 에서는 객체 초기화 시, 접근자를 생성할 수 있다.</span>\n    <span class=\"token keyword\">let</span> o3 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// 접근자 사용을위해, 접근자 property(__id__) 를 선언한다.</span>\n        <span class=\"token comment\">// 접근자 property</span>\n        __id__<span class=\"token operator\">:</span> <span class=\"token string\">''</span><span class=\"token punctuation\">,</span>\n        <span class=\"token comment\">// getter</span>\n        <span class=\"token keyword\">get</span> <span class=\"token function\">id</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>__id__<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token comment\">// setter</span>\n        <span class=\"token keyword\">set</span> <span class=\"token function\">id</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">v</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>__id__ <span class=\"token operator\">=</span> v<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>o3<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ''</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>o3<span class=\"token punctuation\">.</span>__id__<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ''</span>\n\n    o3<span class=\"token punctuation\">.</span>id <span class=\"token operator\">=</span> <span class=\"token string\">'yanione'</span><span class=\"token punctuation\">;</span>\n\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>o3<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// yanione</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>o3<span class=\"token punctuation\">.</span>__id__<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// yanione</span>\n\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>o3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">let</span> o4 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// 메서드를 생성한다.</span>\n        <span class=\"token function\">method</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token comment\">// 문자열을 통해, property 명 조합할 수 있다.</span>\n        <span class=\"token punctuation\">[</span><span class=\"token string\">'me'</span><span class=\"token operator\">+</span> <span class=\"token string\">'thod1'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token comment\">// generator 를 생성할 수 있다.</span>\n        <span class=\"token operator\">*</span> <span class=\"token function\">generator</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">length <span class=\"token operator\">=</span> <span class=\"token number\">10</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\n            <span class=\"token comment\">// 일반적인 동기화 구문</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">yield</span> i<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token comment\">// 전달된 generator 를 비동기로 호출하는 함수</span>\n        <span class=\"token function\">asyncAction</span><span class=\"token punctuation\">(</span>generator<span class=\"token punctuation\">,</span> <span class=\"token function-variable function\">cb</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> time <span class=\"token operator\">=</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>generator<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">let</span> v <span class=\"token operator\">=</span> generator<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>v<span class=\"token punctuation\">.</span>done<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n                window<span class=\"token punctuation\">.</span><span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">asyncAction</span><span class=\"token punctuation\">(</span>generator<span class=\"token punctuation\">,</span> cb<span class=\"token punctuation\">,</span> time<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token function\">cb</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> time<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>o4<span class=\"token punctuation\">.</span><span class=\"token function\">method</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 1</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>o4<span class=\"token punctuation\">.</span><span class=\"token function\">method1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 2</span>\n\n    <span class=\"token keyword\">let</span> __generator__ <span class=\"token operator\">=</span> o4<span class=\"token punctuation\">.</span><span class=\"token function\">generator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// 동기화 구문을 포함한 generator 를 (재귀 호출을 위한)setTimeout 함수를 통해, 비동기로 호출한다.</span>\n    <span class=\"token comment\">// 전달된 callback 함수를 1초 마다 호출하게된다.</span>\n    o4<span class=\"token punctuation\">.</span><span class=\"token function\">asyncAction</span><span class=\"token punctuation\">(</span>__generator__<span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">v</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// o object</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 0 ~ 9</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n<li>\n<p><span style=\"color:#c11f1f\">super</span> 키워드를 통해, 상속받은 객체 메서드를 호출할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">let</span> o1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">method1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            <span class=\"token comment\">// super 키워드를 통해, 상속받은 객체 메서드를 호출할 수 있다.</span>\n            <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">method2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">let</span> o2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">method2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'method2'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n    Object<span class=\"token punctuation\">.</span><span class=\"token function\">setPrototypeOf</span><span class=\"token punctuation\">(</span>o1<span class=\"token punctuation\">,</span> o2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    o1<span class=\"token punctuation\">.</span><span class=\"token function\">method1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n<li>\n<p><span style=\"color:#c11f1f\">ES5</span> 의 __proto__ 내부 속성을 통해, <span style=\"color:#c11f1f\">super</span> 키워드를 구현할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> o1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">method1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            <span class=\"token comment\">// getPrototypeOf 메서드는 chrome 5, IE 9 이상에서 지원한다(대부분의 브라우저에서 지원한다고 볼 수 있다)</span>\n            <span class=\"token comment\">// getPrototypeOf 메서드를 통해, super 키워드를 구현할 수 있다.</span>\n            <span class=\"token comment\">// Object.getPrototypeOf(this).method2() === this.__proto__.method2()</span>\n            Object<span class=\"token punctuation\">.</span><span class=\"token function\">getPrototypeOf</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">method2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">let</span> o2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">method2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'method2'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// setPrototypeOf 메서드는 chrome 34, IE 11 이상에서만 지원한다.</span>\n    <span class=\"token comment\">// Object.setPrototypeOf(o1, o2) === o1.__proto__ = o2;</span>\n    Object<span class=\"token punctuation\">.</span><span class=\"token function\">setPrototypeOf</span><span class=\"token punctuation\">(</span>o1<span class=\"token punctuation\">,</span> o2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    o1<span class=\"token punctuation\">.</span><span class=\"token function\">method1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n</ul>\n<h2>관련 URL</h2>\n<ul>\n<li>\n<p><a href=\"https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Operators/Object_initializer\">Object initializer</a></p>\n</li>\n<li>\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/super\">super</a></p>\n</li>\n<li>\n<p><a href=\"http://www.bsidesoft.com/?p=2053\">[es6] Generator #1</a></p>\n</li>\n<li>\n<p><a href=\"https://medium.com/@dduskim/es6-in-depth-let-and-const-%EB%B2%88%EC%97%AD-31028c086e72#.c48zfoehd\">ES6 In Depth: let and const (번역)</a></p>\n</li>\n</ul>","frontmatter":{"title":"ES6 object initializer","date":"April 21, 2016","description":"ES6 object initializer"}},"previous":{"fields":{"slug":"/2016-03-24-es6-destructuring-assignment/"},"frontmatter":{"title":"ES6 Destructuring assignment"}},"next":{"fields":{"slug":"/2018-07-27-coding-technique/"},"frontmatter":{"title":"코딩을 지탱하는 기술(1 ~ 3장)"}}},"pageContext":{"id":"29bc144f-dcfc-55cf-bc8d-33d1dbaa0eb5","previousPostId":"bc424f79-450d-52a4-b949-d42717f6e7b3","nextPostId":"96cdeb1b-e628-515d-91dc-203d68e81ebc"}},
    "staticQueryHashes": ["2841359383","3257411868"]}