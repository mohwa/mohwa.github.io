{
    "componentChunkName": "component---src-templates-blog-post-js",
    "path": "/2016-02-23-es6-let/",
    "result": {"data":{"site":{"siteMetadata":{"title":"Mohwa Blog"}},"markdownRemark":{"id":"2c9feb94-d620-5d2a-b9a0-bb7adf63f355","excerpt":"1. 글에 대해 모든 결과는 Chrome 브라우저를 통해 테스트된 결과입니다. 2. ES5 & var var 키워드를 통한 변수 선언 ES5 는 오직 function execution context 내부에서만 Isolated Scope(격리된 유효범위) 를 가질 수 있다. 즉 ES…","html":"<h2>1. 글에 대해</h2>\n<ul>\n<li>모든 결과는 <strong>Chrome 브라우저</strong>를 통해 테스트된 결과입니다.</li>\n</ul>\n<h2>2. <span style=\"color:#c11f1f\">ES5</span> &#x26; <span style=\"color:#c11f1f\">var</span></h2>\n<ul>\n<li>\n<h3><span style=\"color:#c11f1f\">var</span> 키워드를 통한 변수 선언</h3>\n<ul>\n<li>\n<p><span style=\"color:#c11f1f\">ES5</span> 는 오직 function execution context 내부에서만 <span style=\"color:#c11f1f\">Isolated Scope</span>(격리된 유효범위) 를 가질 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// global ec</span>\n<span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token constant\">A</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\n    <span class=\"token comment\">// A function ec</span>\n\n    <span class=\"token comment\">// AFunctionEC.AO.a</span>\n    <span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token constant\">B</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\n        <span class=\"token comment\">// B function ec</span>\n\n        <span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// BFunctionEC.AO.a</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 2</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 1</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// globalEC.VO.a</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 0</span>\n\n<span class=\"token constant\">A</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n</li>\n<li>\n<p>즉 <span style=\"color:#c11f1f\">ES5</span> 는 <strong>클래스 기반 언어</strong>인 C or C++ 처럼, 블럭 내부에 <span style=\"color:#c11f1f\">Isolated Scope</span>(격리된 유효범위) 를 가질 수 없다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// global ec</span>\n<span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\n    <span class=\"token comment\">// if 문 블럭 내부의 local context 를 갖지않는다.</span>\n    <span class=\"token comment\">// 즉 선언된 변수 a 는 다른 값(1)으로 대치된다.</span>\n    <span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// globalEC.VO.a</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 1</span></code></pre></div>\n</li>\n</ul>\n</li>\n</ul>\n<h2>3. <span style=\"color:#c11f1f\">ES6</span> &#x26; <span style=\"color:#c11f1f\">let</span></h2>\n<ul>\n<li>\n<p><span style=\"color:#c11f1f\">let</span> 키워드를 통해 선언된 <strong>변수</strong>는, 블럭 범위의 <span style=\"color:#c11f1f\">Isolated Scope</span>(격리된 유효범위) 를 갖게된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">\n<span class=\"token comment\">// global scope</span>\n\n<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// block scope</span>\n\n    <span class=\"token comment\">// let 키워드를 통한 변수 선언</span>\n    <span class=\"token keyword\">let</span> a <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> b <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">case</span> <span class=\"token number\">1</span><span class=\"token operator\">:</span>\n        <span class=\"token keyword\">let</span> c <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> d <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> d <span class=\"token operator\">&lt;</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span> d<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 0, 1, 2</span>\n<span class=\"token punctuation\">}</span>\n      \n\n<span class=\"token keyword\">let</span> e <span class=\"token operator\">=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span>\n\n\n<span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 실행 코드 처리 시, 블록 범위에 선언된 a 변수는 선언되지 않았다는 예외가 발생하게 된다.</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// a is not defined</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 실행 코드 처리 시, 블록 범위에 선언된 b 변수는 선언되지 않았다는 예외가 발생하게 된다.</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// b is not defined</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 실행 코드 처리 시, 블록 범위에 선언된 c 변수는 선언되지 않았다는 예외가 발생하게 된다.</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// c is not defined</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 실행 코드 처리 시, 블록 범위에 선언된 d 변수는 선언되지 않았다는 예외가 발생하게 된다.</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// d is not defined</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 4</span></code></pre></div>\n</li>\n<li>\n<p><span style=\"color:#c11f1f\">let</span> 키워드를 통해 선언된 <strong>변수</strong>의 <strong>유효 범위</strong>는 자신을 포함한 <span style=\"color:#c11f1f\">블럭</span> 및 그 <span style=\"color:#c11f1f\">내부 블럭</span>까지 유효하다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> a <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">let</span> b <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">let</span> c <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">let</span> d <span class=\"token operator\">=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span>\n\n                <span class=\"token comment\">// 선언된 변수의 유효 범위는 자신을 포함한 블럭 및 그 내부 블럭까지 유효하다</span>\n                console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">,</span> d<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 1, 2, 3, 4</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 1;</span>\n\n    <span class=\"token comment\">// 해당 블럭 Scope 에서는 b 변수에 접근할 수 없다.</span>\n    <span class=\"token keyword\">try</span><span class=\"token punctuation\">{</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// b is not defined</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n<li>\n<p>동일 블럭 범위에서, 동일한 <strong>식별자 이름</strong>으로 변수를 <span style=\"color:#c11f1f\">재 선언</span>시 <span style=\"color:#c11f1f\">예외</span>가 발생하게된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// 동일 블럭 범위에서, 동일한 식별자 이름으로 변수를 재 선언시, 아래와 같은 예외가 발생하게된다.</span>\n\n<span class=\"token keyword\">let</span> a<span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// Uncaught SyntaxError: Identifier 'a' has already been declared</span>\n<span class=\"token keyword\">let</span> a<span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> b<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// Uncaught SyntaxError: Identifier 'b' has already been declared</span>\n    <span class=\"token keyword\">let</span> b<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> i<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> i<span class=\"token punctuation\">;</span> <span class=\"token comment\">// Uncaught SyntaxError: Identifier 'i' has already been declared</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token constant\">A</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> c<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> c<span class=\"token punctuation\">;</span> <span class=\"token comment\">// Uncaught SyntaxError: Identifier 'c' has already been declared</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 다른 식별자 이름으로 선언 시 예외가 발생하지 않는다.</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> c<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> d<span class=\"token punctuation\">;</span>\n\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// undefined</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n<li>\n<p><span style=\"color:#c11f1f\">let</span> 키워드를 통해 선언된 <strong>변수</strong>는 <span style=\"color:#c11f1f\">EC</span> 진입 및 실행 코드 처리 후에도 <span style=\"color:#c11f1f\">VO</span> 의 새로운 속성으로 추가되지않는다.</p>\n<p><img src=\"http://mohwa.github.io/blog/assets/images/posts/20160223/let_1.png\" alt=\"\"></p>\n<ul>\n<li>\n<p><em>변수(a)가 <strong>Scope</strong> 에는 존재하지만, 초기화 되지않는 이 단계를 가리켜 Temporal Dead Zone(일시적 사각 지대)라고 부르며, 관련 <strong>예외</strong> 또한 모두 구현되어있다.</em></p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// global ec 진입 시 VO 의 새로운 속성으로 추가되지않는다.</span>\n<span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// a is not defined</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">let</span> a <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 할당된 값을 반환한다.</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 1</span>\n\n<span class=\"token comment\">// 실행 코드 처리후에도 VO 의 새로운 속성으로 추가되지않는다.</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>window<span class=\"token punctuation\">.</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// undefined</span></code></pre></div>\n</li>\n</ul>\n</li>\n<li>\n<p>동일 <span style=\"color:#c11f1f\">VO</span>(AO) 범위에서, 동일한 <strong>식별자 이름</strong>으로 변수(or 함수) <span style=\"color:#c11f1f\">선언</span> 시 <span style=\"color:#c11f1f\">예외</span>가 발생하게 된다.(단 <span style=\"color:#c11f1f\">let</span> 키워드를 통해 선언된 변수는 <span style=\"color:#c11f1f\">VO</span> 의 속성으로 추가되지않는다)</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">\n<span class=\"token comment\">// 테스트 1</span>\n<span class=\"token comment\">// global ec</span>\n<span class=\"token keyword\">let</span> a<span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// globalEC.VO.a</span>\n<span class=\"token keyword\">var</span> a<span class=\"token punctuation\">;</span> <span class=\"token comment\">// Uncaught SyntaxError: Identifier 'a' has already been declared</span>\n\n\n<span class=\"token comment\">// 테스트 2</span>\n<span class=\"token comment\">// global ec</span>\n<span class=\"token keyword\">let</span> a<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// globalEC.VO.a</span>\n    <span class=\"token keyword\">var</span> a<span class=\"token punctuation\">;</span> <span class=\"token comment\">// Uncaught SyntaxError: Identifier 'a' has already been declared</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 테스트 3</span>\n<span class=\"token comment\">// global ec</span>\n<span class=\"token keyword\">let</span> a<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// globalEC.VO.a</span>\n    <span class=\"token keyword\">var</span> a<span class=\"token punctuation\">;</span> <span class=\"token comment\">// Uncaught SyntaxError: Identifier 'a' has already been declared</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 테스트 4</span>\n<span class=\"token comment\">// global ec</span>\n<span class=\"token keyword\">let</span> a<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// globalEC.VO.a</span>\n<span class=\"token comment\">// Uncaught SyntaxError: Identifier 'a' has already been declared</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">a</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\n    <span class=\"token comment\">// a function ec</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 테스트 5</span>\n<span class=\"token comment\">// global ec</span>\n<span class=\"token keyword\">let</span> a<span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token constant\">A</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\n    <span class=\"token comment\">// A function ec</span>\n\n    <span class=\"token comment\">// 이 경우 a 변수는 globalEC.VO 의 속성으로 추가되며, 마찬가지로 예외가 발생하게된다.</span>\n\n    a<span class=\"token punctuation\">;</span> <span class=\"token comment\">// Uncaught SyntaxError: Identifier 'a' has already been declared</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      \n   \n<span class=\"token comment\">// 테스트 6            </span>\n<span class=\"token comment\">// global ec</span>\n<span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token constant\">A</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\n    <span class=\"token comment\">// function ec</span>\n    \n    <span class=\"token keyword\">let</span> a<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// 이 경우 a 변수는 AFunctionEC.AO 의 속성으로 추가되며, 마찬가지로 예외가 발생하게된다.</span>\n    <span class=\"token keyword\">var</span> a<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   \n\n<span class=\"token comment\">// 테스트 7</span>\n<span class=\"token comment\">// global ec</span>\n<span class=\"token keyword\">let</span> a<span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token constant\">A</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\n    <span class=\"token comment\">// A function ec</span>\n\n    <span class=\"token comment\">// 이 경우 a 변수는 AFunctionEC.AO 의 속성으로 추가되며, 예외가 발생하지않는다.</span>\n    <span class=\"token keyword\">var</span> a<span class=\"token punctuation\">;</span>\n\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// undefined</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n</li>\n<li>\n<p><span style=\"color:#c11f1f\">루프</span>(for, while 등)문 내부에서 (<span style=\"color:#c11f1f\">let</span> 키워드를 통해)선언된 변수는, <span style=\"color:#c11f1f\">비동기 함수</span>안에서 각기 다른 <span style=\"color:#c11f1f\">변수</span>를 <span style=\"color:#c11f1f\">참조</span>하게된다.(즉 각 <span style=\"color:#c11f1f\">루프</span>는 서로 다른 <span style=\"color:#c11f1f\">변수</span>(값)를 가지게 된다)</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">\n<span class=\"token comment\">// global scope</span>\n\n<span class=\"token comment\">// 루프 문 밖에서 let 키워드를 통해 선언된 변수</span>\n<span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">;</span>i <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token comment\">// block scope</span>\n    window<span class=\"token punctuation\">.</span><span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// 이 경우 i 변수는 최종 증감값인 10 을 반환하게된다.</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 10</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// global scope</span>\n\n<span class=\"token comment\">// 루프문 내부에 let 키워드를 통해 선언된 변수</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token comment\">// block scope</span>\n    window<span class=\"token punctuation\">.</span><span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// 이 경우 i 변수는 각기 다른 변수 값을 참조하게된다.</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 0 ~ 9</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// global scope</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token comment\">// block scope</span>\n\n    <span class=\"token comment\">// 루프문 내부에 let 키워드를 통해 선언된 변수</span>\n    <span class=\"token keyword\">let</span> _i <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span>\n\n    window<span class=\"token punctuation\">.</span><span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// 이 경우 _i 변수는 각기 다른 변수 값을 참조하게된다.</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>_i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 0 ~ 9</span>\n        <span class=\"token comment\">// var 키워드를 통해 선언된 i 변수는, 함수 Scope Chain 매커니즘에 의해 최종 증감값인 10을 참조하게된다.</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 10</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 10;</span>\n\n\n<span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token comment\">// block scope</span>\n\n    <span class=\"token keyword\">let</span> _i <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// let 키워드를 통해 변수를 선언한다.</span>\n    window<span class=\"token punctuation\">.</span><span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// 이 경우 _i 변수는 각기 다른 변수 값을 참조하게된다.</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>_i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 4 ~ 1</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    i<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 위 결과를 ES5 를 통해 구현한 방법은 아래와 같다.</span>\n\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\n    window<span class=\"token punctuation\">.</span><span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">i</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\n        <span class=\"token comment\">// Function.AO.i</span>\n        <span class=\"token comment\">// bind 함수를 통해 바인딩된 AO.i 값을 참조하게 된다.</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 0 ~ 9</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 최종 증감값인 10을 반환하게된다.</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 10</span>\n</code></pre></div>\n</li>\n<li>\n<p><span style=\"color:#c11f1f\">eval 함수</span>를 통해, 선언된 변수(or 함수)는 <span style=\"color:#c11f1f\">local sandbox</span> 안에서 평가된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">\n<span class=\"token function\">eval</span><span class=\"token punctuation\">(</span><span class=\"token string\">'let i'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">try</span><span class=\"token punctuation\">{</span>\n    i<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// i is not defined</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n</li>\n</ul>\n<h2>관련 URL</h2>\n<ul>\n<li>\n<p><a href=\"https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Statements/let\">let</a></p>\n</li>\n<li>\n<p><a href=\"http://mohwa.github.io/blog/javascript/2015/10/14/vo-inJS/\">Variable Object in JS</a></p>\n</li>\n<li>\n<p><a href=\"http://exploringjs.com/es6/ch_variables.html#leanpub-auto-the-temporal-dead-zone\">Variables and scoping</a></p>\n</li>\n<li>\n<p><a href=\"https://medium.com/@dduskim/es6-in-depth-let-and-const-%EB%B2%88%EC%97%AD-31028c086e72#.c48zfoehd\">ES6 In Depth: let and const(번역)</a></p>\n</li>\n<li>\n<p><a href=\"http://mohwa.github.io/blog/javascript/2015/10/14/variable-inJS/\">Variable in JS</a></p>\n</li>\n</ul>","frontmatter":{"title":"ES6 let","date":"February 23, 2016","description":"ES6 let"}},"previous":{"fields":{"slug":"/2016-02-18-es6-arrow-function/"},"frontmatter":{"title":"ES6 Arrow Function & This Test"}},"next":{"fields":{"slug":"/2016-02-24-es6-const/"},"frontmatter":{"title":"ES6 const"}}},"pageContext":{"id":"2c9feb94-d620-5d2a-b9a0-bb7adf63f355","previousPostId":"47307d96-cc16-5cf6-bd2b-c53c284e5d8d","nextPostId":"cbbd46b3-a751-5d6c-859a-bb67759abd20"}},
    "staticQueryHashes": ["2841359383","3257411868"]}