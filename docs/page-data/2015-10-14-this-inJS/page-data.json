{
    "componentChunkName": "component---src-templates-blog-post-js",
    "path": "/2015-10-14-this-inJS/",
    "result": {"data":{"site":{"siteMetadata":{"title":"Mohwa Blog"}},"markdownRemark":{"id":"818b3dc9-0786-54e2-8d5b-34b9f1cb575d","excerpt":"this 값은 Execution Context 의 속성 중 하나이다.  this 값은 해당 Execution Context 진입 시 초기화된 후, 그 값이 변하지 않는다. 레퍼런스 타입(Reference Type) 레퍼런스 타입은 base 와 propertyName…","html":"<ul>\n<li>\n<p><span style=\"color:#6298c1\">this</span> 값은 Execution Context 의 <strong>속성</strong> 중 하나이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> ECStack <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n  globalExecutionContext<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token constant\">VO</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token keyword\">this</span><span class=\"token operator\">:</span> global object\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><img src=\"https://www.dropbox.com/s/qwq6esodeumm7qq/96.jpg?dl=1\" alt=\"\"></p>\n</li>\n<li>\n<p><span style=\"color:#6298c1\">this</span> 값은 <u>해당 Execution Context <strong>진입 시 초기화</strong>된 후</u>, 그 <strong>값</strong>이 변하지 않는다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">\n<span class=\"token comment\">// global Execution Context</span>\n\n<span class=\"token comment\">// 실행 코드 처리 시 새로운 값을 할당할 수 없다.</span>\n<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>window <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 실행 코드 처리 후 값이 변하지 않는다.</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>window<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// global object</span>\n</code></pre></div>\n</li>\n<li>\n<p>레퍼런스 타입(Reference Type)</p>\n<ul>\n<li>\n<p><strong>레퍼런스 타입</strong>은 base 와 propertyName <strong>속성</strong>을 가진 <strong>객체</strong>로 표현할 수 있으며, 설명을 목적으로 <strong>“ECMA 스펙”</strong> 에서 정의하고 있는 <strong>개념</strong>이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">\n  <span class=\"token comment\">// 아래는 레퍼런스 타입을 나타내는 pseudo-code 이다.</span>\n  <span class=\"token keyword\">var</span> valueOfReferenceType <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    base<span class=\"token operator\">:</span> <span class=\"token operator\">&lt;</span>base object<span class=\"token operator\">></span><span class=\"token punctuation\">,</span>\n    propertyName<span class=\"token operator\">:</span> <span class=\"token operator\">&lt;</span>property name<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<ul>\n<li>\n<p><strong>레퍼런스 타입</strong>은 오직 두 가지 경우에만 있을 수 있다.</p>\n<ul>\n<li>\n<p><a href=\"http://www.devholic.net/1000687\">식별자(identifier)</a></p>\n<ul>\n<li>\n<p>식별자는 <strong>변수 이름</strong>, <strong>함수 이름</strong>, <strong>함수 Argument 이름</strong>으로 나뉜다.</p>\n</li>\n<li>\n<p>변수 이름</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">\n<span class=\"token comment\">// global Execution Context</span>\n\n<span class=\"token comment\">// A 변수 선언</span>\n<span class=\"token keyword\">var</span> <span class=\"token constant\">A</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token constant\">A</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 1</span></code></pre></div>\n</li>\n<li>\n<p>레퍼런스 타입 내부</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> AReference <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  base<span class=\"token operator\">:</span> global object<span class=\"token punctuation\">,</span>\n  propertyName<span class=\"token operator\">:</span> <span class=\"token string\">'A'</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n</li>\n<li>\n<p>함수 이름</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// global Execution Context</span>\n\n<span class=\"token comment\">// A 함수 선언</span>\n<span class=\"token keyword\">function</span> <span class=\"token constant\">A</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token constant\">A</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// A function object</span>\n                    </code></pre></div>\n</li>\n<li>\n<p>레퍼런스 타입 내부</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">```javascript\nvar AReference = {\n  base: global object,\n  propertyName: 'A'\n};\n```</code></pre></div>\n</li>\n<li>\n<p><a href=\"https://es5.github.io/#x8.7.1\">GetValue</a> 메서드</p>\n<ul>\n<li>\n<p><u><strong>객체</strong>(레퍼런스 타입)의 실제 값을 얻기 위해 사용되는 <span style=\"color:#6298c1\">GetValue</span> 메소드가 존재하며</u>, 이 메서드는 <strong>프로토타입 체인</strong>을 통해, 상속된 <strong>속성</strong>까지 모두 분석 후, <strong>객체 속성</strong>(propertyName)의 실제 값을 <strong>반환</strong>해준다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">\n<span class=\"token comment\">// GetValue 메서드를 나타내는 pseudo-code 이다.</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">GetValue</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">value</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  \n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">Type</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> Reference<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 레퍼런스 타입이 아니면 값을 그대로 돌려준다.</span>\n    <span class=\"token keyword\">return</span> value<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  \n  <span class=\"token comment\">// base 속성 값을 가져온다.</span>\n  <span class=\"token keyword\">var</span> base <span class=\"token operator\">=</span> <span class=\"token function\">GetBase</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  \n  <span class=\"token comment\">// base 속성 값이 null 인 경우</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>base <span class=\"token operator\">===</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ReferenceError</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  \n  <span class=\"token comment\">// propertyName 속성 값을 가져온다.</span>\n  <span class=\"token keyword\">var</span> propertyName <span class=\"token operator\">=</span> <span class=\"token function\">GetPropertyName</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  \n  <span class=\"token comment\">// [[Get]] 메서드는 프로토타입 체인으로부터, 상속된 속성까지 모두 분석 후 속성의 실제 값을 돌려준다.</span>\n  <span class=\"token keyword\">return</span> base<span class=\"token punctuation\">.</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span>Get<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>propertyName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  \n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">GetValue</span><span class=\"token punctuation\">(</span>ReferenceType<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>프로퍼티 접근자(property accessor)</p>\n<ul>\n<li>\n<p>obj 객체의 A 메서드</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// global Execution Context</span>\n\n<span class=\"token keyword\">var</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function-variable function\">A</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">.</span><span class=\"token constant\">A</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// obj Object</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">[</span><span class=\"token string\">'A'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// obj Object</span></code></pre></div>\n</li>\n<li>\n<p>레퍼런스 타입 내부</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> objAReference <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  base<span class=\"token operator\">:</span> obj Object<span class=\"token punctuation\">,</span>\n  propertyName<span class=\"token operator\">:</span> <span class=\"token string\">'A'</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n</li>\n<li>\n<p><span style=\"color:#6298c1\">GetValue</span> 메서드를 통해 해당 <strong>속성</strong>(propertyName) 값을 반환한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token function\">GetValue</span><span class=\"token punctuation\">(</span>objAReference<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// A function object</span></code></pre></div>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>전역 코드 안의 <span style=\"color:#6298c1\">this</span> 값</p>\n<ul>\n<li>\n<p><strong>전역 코드</strong>안의 <span style=\"color:#6298c1\">this</span> 는 <strong>전역 객체</strong> 자신이된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">\n<span class=\"token comment\">// global code in global Execution Context</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// global object</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>window<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// global object</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span> <span class=\"token operator\">===</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>window<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span></code></pre></div>\n</li>\n</ul>\n</li>\n<li>\n<p>함수 코드 안의 <span style=\"color:#6298c1\">this</span> 값</p>\n<ul>\n<li>\n<p><strong>함수 코드</strong>의 경우 <span style=\"color:#6298c1\">this</span> 가 <u>가리키는 <strong>대상</strong>이 매번 달라질 수 있다</u>.</p>\n<ul>\n<li>\n<p>Function Execution Context 진입 시 <span style=\"color:#6298c1\">this</span> 가 가지는 <strong>초기화</strong> 값은 <u><strong>호출 표현식 형태</strong>에 의해 달라진다</u>.</p>\n</li>\n<li>\n<p>함수 코드 안의 <span style=\"color:#6298c1\">this</span> 값이 <strong>초기화</strong>되는 과정</p>\n<ul>\n<li>\n<p>만약 ()(함수 호출 괄호) 왼편의 (<strong>식별자</strong> 또는 <strong>프로퍼티 접근자</strong>)가 <strong>레퍼런스 타입</strong>일경우, 함수 코드 안의 <span style=\"color:#6298c1\">this</span> 값은 해당 <u><strong>레퍼런스 타입</strong>의 <strong>base</strong> 속성 값으로 <strong>초기화</strong>된다.</u><p></p>\n</li>\n<li>\n<p>그러나 <strong>레퍼런스 타입</strong>이 아닌 경우, <span style=\"color:#6298c1\">this</span> 값은 자동으로 <span style=\"color:#6298c1\">null</span> 을 갖게되며, <u><span style=\"color:#6298c1\">null</span> 은 <span style=\"color:#6298c1\">this</span> 값으로 <strong>평가</strong>될 수 없기때문에, <strong>암묵적</strong>으로 <strong>전역 객체</strong>로 <strong>변환</strong>된다.</u><p></p>\n</li>\n<li>\n<p>A 함수</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// global Execution Context</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token constant\">A</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\n  <span class=\"token comment\">// function Execution Context</span>\n  <span class=\"token comment\">// this 값은 해당 레퍼런스 타입의 base 속성 값으로 초기화된다.</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// global object</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// [호출자].[propertyName](호출괄호)</span>\n<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token constant\">A</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// this.A();</span></code></pre></div>\n</li>\n<li>\n<p>레퍼런스 타입 <strong>체크</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">\n<span class=\"token comment\">// reference Type</span>\n<span class=\"token keyword\">var</span> AReference <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  base<span class=\"token operator\">:</span> global object<span class=\"token punctuation\">,</span>\n  propertyName<span class=\"token operator\">:</span> <span class=\"token string\">'A'</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// referenceType 값을 반환한다.</span>\n<span class=\"token function\">GetValue</span><span class=\"token punctuation\">(</span>AReference<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// A function object</span>\n</code></pre></div>\n</li>\n<li>\n<p>obj 객체의 X 메서드</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">\n<span class=\"token comment\">// global Execution Context</span>\n\n<span class=\"token keyword\">var</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function-variable function\">X</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">.</span><span class=\"token constant\">X</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// obj Object</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">[</span><span class=\"token string\">'X'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// obj Object</span></code></pre></div>\n</li>\n<li>\n<p>레퍼런스 타입 <strong>체크</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">\n<span class=\"token comment\">// reference Type</span>\n<span class=\"token keyword\">var</span> objXReference <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  base<span class=\"token operator\">:</span> obj Object<span class=\"token punctuation\">,</span>\n  propertyName<span class=\"token operator\">:</span> <span class=\"token string\">'X'</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// referenceType 값을 반환한다.</span>\n<span class=\"token function\">GetValue</span><span class=\"token punctuation\">(</span>objXReference<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// X function object</span></code></pre></div>\n</li>\n<li>\n<p>obj 객체의 A 메서드를 x 변수에 <strong>할당</strong>한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">\n<span class=\"token comment\">// global Execution Context</span>\n\n<span class=\"token keyword\">var</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function-variable function\">A</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// x 변수 선언</span>\n<span class=\"token keyword\">var</span> x <span class=\"token operator\">=</span> obj<span class=\"token punctuation\">.</span><span class=\"token constant\">A</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">x</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// global object</span></code></pre></div>\n</li>\n<li>\n<p>레퍼런스 타입 <strong>체크</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">\n<span class=\"token comment\">// reference Type</span>\n<span class=\"token keyword\">var</span> objAReference <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  base<span class=\"token operator\">:</span> obj Object<span class=\"token punctuation\">,</span>\n  propertyName<span class=\"token operator\">:</span> <span class=\"token string\">'A'</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// reference Type</span>\n<span class=\"token keyword\">var</span> xReference <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  base<span class=\"token operator\">:</span> global object<span class=\"token punctuation\">,</span>\n  propertyName<span class=\"token operator\">:</span> <span class=\"token string\">'x'</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// referenceType 값을 반환한다.</span>\n<span class=\"token function\">GetValue</span><span class=\"token punctuation\">(</span>xReference<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// A function object</span></code></pre></div>\n</li>\n<li>\n<p>레퍼런스 타입이 아닌 <strong>함수 표현식</strong>(즉시 실행 함수)</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// global Execution Context</span>\n\n<span class=\"token comment\">// 식별자 또는 프로퍼티 접근자가 아닌 함수 표현식</span>\n<span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// 이 경우 레퍼런스 타입이 존재하지 않으므로, 결국 null 을 반환 후 자동으로 전역 객체로 변환된다.</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// null => global object</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n</li>\n<li>\n<p>레퍼런스 타입 <strong>체크</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">\n<span class=\"token comment\">// 식별자 또는 프로퍼티 접근자가 아닌 함수 표현식(즉시 실행 함수)은 reference Type 값이 존재하지 않는다.</span></code></pre></div>\n</li>\n<li>\n<p><strong>함수 내부에 선언된 함수</strong></p>\n<ul>\n<li>\n<p>A 함수 내부에 선언된 B 함수는 <span style=\"color:#c11f1f\">AO</span>(VO) 가 갖는 <strong>속성</strong> 중 하나이다. 또한 <span style=\"color:#c11f1f\">AO</span>(VO) 는 항상 <span style=\"color:#6298c1\">this</span> 값을 <span style=\"color:#6298c1\">null</span> 로 반환하기 때문에, 결국 B 함수 내부 <span style=\"color:#6298c1\">this</span> 는 global object 를 갖게된다.(AO.B() === null.B())<p></p>\n<ul>\n<li>\n<p>The activation object always returns as this value — null (i.e. pseudo-code AO.bar() is equivalent to null.bar()). Here again we come back to the described above case, and again, this value is set to global object.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">\n  <span class=\"token comment\">// global execution context</span>\n\n  <span class=\"token keyword\">function</span> <span class=\"token constant\">A</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token comment\">// function Execution Context</span>\n\n    <span class=\"token keyword\">function</span> <span class=\"token constant\">B</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// this === null => global object</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token constant\">B</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// AO.B() == null.B()</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token constant\">A</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n</li>\n</ul>\n</li>\n<li>\n<p><span style=\"color:#c11f1f\">ECStack</span> 내부</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">  <span class=\"token keyword\">var</span> ECStack <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token operator\">&lt;</span><span class=\"token constant\">B</span><span class=\"token operator\">></span> activeFunctionExecutionContext<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token constant\">AO</span><span class=\"token punctuation\">(</span><span class=\"token constant\">VO</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        arguments<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      <span class=\"token keyword\">this</span><span class=\"token operator\">:</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">==</span><span class=\"token operator\">></span> global Object                          \n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>                      \n    <span class=\"token operator\">&lt;</span><span class=\"token constant\">A</span><span class=\"token operator\">></span> functionExecutionContext<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token constant\">AO</span><span class=\"token punctuation\">(</span><span class=\"token constant\">VO</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        arguments<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token constant\">B</span><span class=\"token operator\">:</span> <span class=\"token operator\">&lt;</span> reference to <span class=\"token keyword\">function</span> <span class=\"token operator\">></span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      <span class=\"token keyword\">this</span><span class=\"token operator\">:</span> global Object                          \n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    globalExecutionContext<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token constant\">VO</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token constant\">A</span><span class=\"token operator\">:</span> <span class=\"token operator\">&lt;</span> reference to <span class=\"token keyword\">function</span> <span class=\"token operator\">></span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      <span class=\"token keyword\">this</span><span class=\"token operator\">:</span> global object                        \n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></code></pre></div>\n</li>\n<li>\n<p>레퍼런스 타입 <strong>체크</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">\n  <span class=\"token comment\">// reference Type</span>\n  <span class=\"token keyword\">var</span> BReference <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    base<span class=\"token operator\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>\n    propertyName<span class=\"token operator\">:</span> <span class=\"token string\">'B'</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// referenceType 값을 반환한다.</span>\n  <span class=\"token function\">GetValue</span><span class=\"token punctuation\">(</span>BReference<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// B function object</span></code></pre></div>\n</li>\n</ul>\n</li>\n<li>\n<p>생성자 함수 호출</p>\n<ul>\n<li>\n<p>new 연산자의 <strong>객체 매커니즘</strong>에 따라 <span style=\"color:#6298c1\">this</span> 값은 생성된 <strong>객체</strong>로 <strong>초기화</strong> 된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">\n  <span class=\"token comment\">// global Execution Context</span>\n\n  <span class=\"token keyword\">function</span> <span class=\"token constant\">A</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\n    <span class=\"token comment\">// function Execution Context</span>\n\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>id <span class=\"token operator\">=</span> <span class=\"token string\">'mohwa'</span><span class=\"token punctuation\">;</span>\n    \n    <span class=\"token comment\">// new 연산자 + 생성자 함수를 통해 생성된 객체로 초기화된다.</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">dir</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// A object</span>\n  <span class=\"token punctuation\">}</span>\n  \n  <span class=\"token comment\">// 객체를 생성한다.</span>\n  <span class=\"token keyword\">new</span> <span class=\"token class-name\">A</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><img src=\"https://www.dropbox.com/s/4mkmvx22cmlo7ow/92.jpg?dl=1\" alt=\"\"></p>\n</li>\n<li>\n<p>new 연산자 매커니즘 Pseudo-Code</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token constant\">A</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>id <span class=\"token operator\">=</span> <span class=\"token string\">'mohwa'</span><span class=\"token punctuation\">;</span>\n\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">dir</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// A instance</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">var</span> o <span class=\"token operator\">=</span> <span class=\"token function\">New</span><span class=\"token punctuation\">(</span><span class=\"token constant\">A</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">dir</span><span class=\"token punctuation\">(</span>o<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// A instance</span>\n\n<span class=\"token comment\">// new 연산자 구현</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">New</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">constructor</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n  constructor <span class=\"token operator\">=</span> constructor <span class=\"token operator\">||</span> <span class=\"token keyword\">function</span> <span class=\"token constant\">F</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">var</span> o <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// 전달받은 생성자 함수 객체의 원형을 o 객체의 원형으로 위임한다.</span>\n  o<span class=\"token punctuation\">.</span>__proto__ <span class=\"token operator\">=</span> constructor<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// 생성자 함수 객체의 this 값을 o 객체로 초기화한다.</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>o<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> o<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><img src=\"https://www.dropbox.com/s/j4xkyq7ixpdvcbf/93.jpg?dl=1\" alt=\"\"></p>\n</li>\n</ul>\n</li>\n<li>\n<p>함수 호출 시 <span style=\"color:#6298c1\">this</span> 값을 <strong>초기화</strong> 하는 방법</p>\n<ul>\n<li>\n<p>Function.prototype <strong>객체</strong> 메서드인 <span style=\"color:#6298c1\">call</span> 과 <span style=\"color:#6298c1\">apply</span> 메서드를 통해, 함수 호출 시 <span style=\"color:#6298c1\">this</span> 값을 <strong>초기화</strong>할 수 있다.<p></p>\n</li>\n<li>\n<p><span style=\"color:#6298c1\">call</span> 메서드를 통해 전달된 <strong>객체</strong>로 <span style=\"color:#6298c1\">this</span> 값을 <strong>초기화</strong>한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">\n<span class=\"token keyword\">function</span> <span class=\"token constant\">A</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x<span class=\"token punctuation\">,</span> y</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\n  <span class=\"token comment\">// function execution context</span>\n\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">dir</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// obj Object</span>\n\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 1</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 2</span>\n\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">var</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  id<span class=\"token operator\">:</span> <span class=\"token string\">'mohwa'</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// A 함수 객체의 this 값을 obj 객체로 초기화 한다.</span>\n<span class=\"token constant\">A</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n</li>\n<li>\n<p><span style=\"color:#6298c1\">apply</span> 메서드를 통해 전달된 <strong>객체</strong>로 <span style=\"color:#6298c1\">this</span> 값을 <strong>초기화</strong>한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token constant\">A</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x<span class=\"token punctuation\">,</span> y</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">dir</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// obj Object</span>\n\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 1</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 2</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">var</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  id<span class=\"token operator\">:</span> <span class=\"token string\">'mohwa'</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// A 함수 객체의 this 값을 obj 객체로 초기화 한다.</span>\n<span class=\"token constant\">A</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2>참고 URL</h2>\n<ul>\n<li>\n<p><a href=\"http://dmitrysoshnikov.com/ecmascript/chapter-3-this/#function-call-and-non-reference-type\">ECMA-262-3 IN DETAIL. CHAPTER 3. THIS</a></p>\n</li>\n<li>\n<p><a href=\"http://huns.me/ecma-262-3-in-detail-chapter-3-this/\">ECMA-262-3 IN DETAIL. CHAPTER 3. THIS(번역)</a></p>\n</li>\n<li>\n<p><a href=\"http://www.nextree.co.kr/p7522/\">this 키워드</a></p>\n</li>\n<li>\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/this\">this</a></p>\n</li>\n<li>\n<p><a href=\"http://mobicon.tistory.com/189\">var _this this 의미 배우기</a></p>\n</li>\n</ul>","frontmatter":{"title":"This in JS","date":"October 14, 2015","description":"JavaScript this context 알아보기"}},"previous":{"fields":{"slug":"/2015-10-13-execution-context-inJS/"},"frontmatter":{"title":"Execution Context in JS"}},"next":{"fields":{"slug":"/2015-10-14-variable-inJS/"},"frontmatter":{"title":"Variable in JS"}}},"pageContext":{"id":"818b3dc9-0786-54e2-8d5b-34b9f1cb575d","previousPostId":"8d28a6ff-4f0e-582d-bff2-ae2da0688bf3","nextPostId":"71826013-474c-5119-b8f0-be88ed8cc465"}},
    "staticQueryHashes": ["2841359383","3257411868"]}