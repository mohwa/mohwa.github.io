{
    "componentChunkName": "component---src-templates-blog-post-js",
    "path": "/2015-11-12-scope-chain-search-test/",
    "result": {"data":{"site":{"siteMetadata":{"title":"Mohwa Blog"}},"markdownRemark":{"id":"62abdd56-58e5-5e0f-b2bc-2c16a5383865","excerpt":"현재 정리중인 ”JavaScript 성능 최적화 책을 읽고..” 라는 포스트 내용 중 Scope Chain 을 통한, 식별자 검색에 대한 이야기가 나온다. 또, 이 내용을 검증하기위한 테스트 코드를 아래와 같이 작성해보았다. 식별자 검색 테스트 (n…","html":"<p>현재 정리중인 ”<a href=\"http://www.hanbit.co.kr/book/look.html?isbn=978-89-7914-855-8\">JavaScript 성능 최적화</a> 책을 읽고..” 라는 포스트 내용 중 <strong>Scope Chain</strong> 을 통한, <strong>식별자 검색</strong>에 대한 이야기가 나온다.</p>\n<p>또, 이 내용을 <strong>검증</strong>하기위한 <strong>테스트 코드</strong>를 아래와 같이 작성해보았다.</p>\n<h2>식별자 검색 테스트</h2>\n<ul>\n<li>\n<p>(<span style=\"color:#c11f1f\">n</span>) 개의 <strong>전역 변수</strong> 및 <strong>중첩 함수</strong>를 생성하여, <strong>식별자 검색</strong>에 대한 <span style=\"color:#c11f1f\">성능 테스트</span>를 진행할 수 있다.</p>\n<iframe height='350' scrolling='no' src='http://codepen.io/yanione/embed/epbYzm/?height=268&theme-id=0&default-tab=result' frameborder='no' allowtransparency='true' allowfullscreen='true' style='width: 100%;'>See the Pen <a href='http://codepen.io/yanione/pen/epbYzm/'>epbYzm</a> by mohwa (<a href='http://codepen.io/yanione'>@yanione</a>) on <a href='http://codepen.io'>CodePen</a>.\n</iframe>\n</li>\n</ul>\n<h2>개선된 식별자 검색</h2>\n<ul>\n<li>\n<p>마지막 <strong>중첩 함수</strong>의 <strong>지역 변수</strong>를 통해, <strong>식별자 검색</strong>을 개선시켰다.</p>\n<ul>\n<li>\n<p>생성된 모든 <strong>전역 변수</strong>를 해당 <strong>지역 변수</strong>에 할당하여, <strong>식별자 검색</strong>에 걸리는 시간을 <strong>최소화</strong>한다.</p>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"4039529716040091000\"\n              data-toaster-class=\"gatsby-code-button-toaster\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text\"\n              data-toaster-text=\"Copied!\"\n              data-toaster-duration=\"3500\"\n              onClick=\"copyToClipboard(`\n// 마지막 중첩 함수일 경우\nif (i === (fnDepthCount - 1)) {\n\n    // 식별자 검색 시작 시간\n    fns.push('var start = new Date().getTime();');\n\n    /******************************************************************/\n    /******************************************************************/\n    // 생성된 모든 전역 변수를 해당 function execution context 내부 AO 에 할당한다.\n    for (var jj = 0; jj < globalVariableCount; jj++) {\n        // 지역 변수에 값을 할당한다.\n        fns.push('var y_' + jj + ' = x_' + jj + ';');\n    }\n    /******************************************************************/\n    /******************************************************************/\n\n    // 마지막 중첩 함수 내부에서, 생성된 n 개의 지역 변수를 n 번 순회하며, 식별자 검색을 통해 값을 가져온다.\n    for (var ii = 0; ii < globalVariableLoopCount; ii++) {\n\n        /******************************************************************/\n        /******************************************************************/\n        // 생성된 모든 지역 변수를 순회한다.\n        for (var jjj = 0; jjj < globalVariableCount; jjj++) {\n            // 식별자 검색을 통해, 값을 가져온다.\n            fns.push('y_' + jjj + ';');\n        }\n        /******************************************************************/\n        /******************************************************************/\n    }\n\n    // 식별자 검색 종료 시간\n    fns.push('var end = new Date().getTime();');\n    fns.push('document.getElementById(\\'searchTime\\').value = (end - start) + \\' ms\\';');\n\n    for (var j = i; j > -1; j--) {\n        fns.push('} A_' + j + '();');\n    }\n}`, `4039529716040091000`)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-tooltip=\"\"\n              >\n                <?xml version=\"1.0\" encoding=\"utf-8\"?>\n<!-- Generator: Adobe Illustrator 19.1.0, SVG Export Plug-In . SVG Version: 6.00 Build 0)  -->\n<svg version=\"1.1\" id=\"Layer_1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\"\n\t viewBox=\"0 0 64 64\" enable-background=\"new 0 0 64 64\" xml:space=\"preserve\">\n<g id=\"Text-files\">\n\t<path d=\"M53.9791489,9.1429005H50.010849c-0.0826988,0-0.1562004,0.0283995-0.2331009,0.0469999V5.0228\n\t\tC49.7777481,2.253,47.4731483,0,44.6398468,0h-34.422596C7.3839517,0,5.0793519,2.253,5.0793519,5.0228v46.8432999\n\t\tc0,2.7697983,2.3045998,5.0228004,5.1378999,5.0228004h6.0367002v2.2678986C16.253952,61.8274002,18.4702511,64,21.1954517,64\n\t\th32.783699c2.7252007,0,4.9414978-2.1725998,4.9414978-4.8432007V13.9861002\n\t\tC58.9206467,11.3155003,56.7043495,9.1429005,53.9791489,9.1429005z M7.1110516,51.8661003V5.0228\n\t\tc0-1.6487999,1.3938999-2.9909999,3.1062002-2.9909999h34.422596c1.7123032,0,3.1062012,1.3422,3.1062012,2.9909999v46.8432999\n\t\tc0,1.6487999-1.393898,2.9911003-3.1062012,2.9911003h-34.422596C8.5049515,54.8572006,7.1110516,53.5149002,7.1110516,51.8661003z\n\t\t M56.8888474,59.1567993c0,1.550602-1.3055,2.8115005-2.9096985,2.8115005h-32.783699\n\t\tc-1.6042004,0-2.9097996-1.2608986-2.9097996-2.8115005v-2.2678986h26.3541946\n\t\tc2.8333015,0,5.1379013-2.2530022,5.1379013-5.0228004V11.1275997c0.0769005,0.0186005,0.1504021,0.0469999,0.2331009,0.0469999\n\t\th3.9682999c1.6041985,0,2.9096985,1.2609005,2.9096985,2.8115005V59.1567993z\"/>\n\t<path d=\"M38.6031494,13.2063999H16.253952c-0.5615005,0-1.0159006,0.4542999-1.0159006,1.0158005\n\t\tc0,0.5615997,0.4544001,1.0158997,1.0159006,1.0158997h22.3491974c0.5615005,0,1.0158997-0.4542999,1.0158997-1.0158997\n\t\tC39.6190491,13.6606998,39.16465,13.2063999,38.6031494,13.2063999z\"/>\n\t<path d=\"M38.6031494,21.3334007H16.253952c-0.5615005,0-1.0159006,0.4542999-1.0159006,1.0157986\n\t\tc0,0.5615005,0.4544001,1.0159016,1.0159006,1.0159016h22.3491974c0.5615005,0,1.0158997-0.454401,1.0158997-1.0159016\n\t\tC39.6190491,21.7877007,39.16465,21.3334007,38.6031494,21.3334007z\"/>\n\t<path d=\"M38.6031494,29.4603004H16.253952c-0.5615005,0-1.0159006,0.4543991-1.0159006,1.0158997\n\t\ts0.4544001,1.0158997,1.0159006,1.0158997h22.3491974c0.5615005,0,1.0158997-0.4543991,1.0158997-1.0158997\n\t\tS39.16465,29.4603004,38.6031494,29.4603004z\"/>\n\t<path d=\"M28.4444485,37.5872993H16.253952c-0.5615005,0-1.0159006,0.4543991-1.0159006,1.0158997\n\t\ts0.4544001,1.0158997,1.0159006,1.0158997h12.1904964c0.5615025,0,1.0158005-0.4543991,1.0158005-1.0158997\n\t\tS29.0059509,37.5872993,28.4444485,37.5872993z\"/>\n</g>\n<g>\n</g>\n<g>\n</g>\n<g>\n</g>\n<g>\n</g>\n<g>\n</g>\n<g>\n</g>\n<g>\n</g>\n<g>\n</g>\n<g>\n</g>\n<g>\n</g>\n<g>\n</g>\n<g>\n</g>\n<g>\n</g>\n<g>\n</g>\n<g>\n</g>\n</svg>\n\n              </div>\n            </div>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">\n<span class=\"token comment\">// 마지막 중첩 함수일 경우</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">===</span> <span class=\"token punctuation\">(</span>fnDepthCount <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token comment\">// 식별자 검색 시작 시간</span>\n    fns<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token string\">'var start = new Date().getTime();'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">/******************************************************************/</span>\n    <span class=\"token comment\">/******************************************************************/</span>\n    <span class=\"token comment\">// 생성된 모든 전역 변수를 해당 function execution context 내부 AO 에 할당한다.</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> jj <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> jj <span class=\"token operator\">&lt;</span> globalVariableCount<span class=\"token punctuation\">;</span> jj<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// 지역 변수에 값을 할당한다.</span>\n        fns<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token string\">'var y_'</span> <span class=\"token operator\">+</span> jj <span class=\"token operator\">+</span> <span class=\"token string\">' = x_'</span> <span class=\"token operator\">+</span> jj <span class=\"token operator\">+</span> <span class=\"token string\">';'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">/******************************************************************/</span>\n    <span class=\"token comment\">/******************************************************************/</span>\n\n    <span class=\"token comment\">// 마지막 중첩 함수 내부에서, 생성된 n 개의 지역 변수를 n 번 순회하며, 식별자 검색을 통해 값을 가져온다.</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> ii <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> ii <span class=\"token operator\">&lt;</span> globalVariableLoopCount<span class=\"token punctuation\">;</span> ii<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n        <span class=\"token comment\">/******************************************************************/</span>\n        <span class=\"token comment\">/******************************************************************/</span>\n        <span class=\"token comment\">// 생성된 모든 지역 변수를 순회한다.</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> jjj <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> jjj <span class=\"token operator\">&lt;</span> globalVariableCount<span class=\"token punctuation\">;</span> jjj<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\">// 식별자 검색을 통해, 값을 가져온다.</span>\n            fns<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token string\">'y_'</span> <span class=\"token operator\">+</span> jjj <span class=\"token operator\">+</span> <span class=\"token string\">';'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token comment\">/******************************************************************/</span>\n        <span class=\"token comment\">/******************************************************************/</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// 식별자 검색 종료 시간</span>\n    fns<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token string\">'var end = new Date().getTime();'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    fns<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token string\">'document.getElementById(\\'searchTime\\').value = (end - start) + \\' ms\\';'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> j <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span> j <span class=\"token operator\">></span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span> j<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        fns<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token string\">'} A_'</span> <span class=\"token operator\">+</span> j <span class=\"token operator\">+</span> <span class=\"token string\">'();'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n</ul>\n</li>\n</ul>\n<h2>테스트 결과</h2>\n<ul>\n<li>\n<p>이 결과는 <strong>테스트 환경</strong>에 따라, <span style=\"color:#c11f1f\">오차 범위</span>를 보일 수 있다.</p>\n</li>\n<li>\n<p>읽기에 비해, 쓰는 시간이 더 오래 걸린다.(당연하지만)</p>\n<ul>\n<li>\n<p>IE: <span style=\"color:#c11f1f\">차후 테스트 진행…</span><p></p>\n</li>\n<li>\n<p>Chrome:</p>\n<ul>\n<li>읽기: <span style=\"color:#c11f1f\">7 ~ 12</span>ms(개선 전) / <span style=\"color:#c11f1f\">0 ~ 1</span>ms(개선 후)<p /></li>\n<li>쓰기: <span style=\"color:#c11f1f\">9 ~ 14</span>ms(개선 전) / <span style=\"color:#c11f1f\">0 ~ 1</span>ms(개선 후)<p /></li>\n</ul>\n</li>\n<li>\n<p>Safari:</p>\n<ul>\n<li>읽기: <span style=\"color:#c11f1f\">5 ~ 7</span>ms(개선 전) / <span style=\"color:#c11f1f\">0 ~ 1</span>ms(개선 후)<p /></li>\n<li>쓰기: <span style=\"color:#c11f1f\">9 ~ 12</span>ms(개선 전) / <span style=\"color:#c11f1f\">0 ~ 1</span>ms(개선 후)<p /></li>\n</ul>\n</li>\n<li>\n<p>FF:</p>\n<ul>\n<li>읽기: <span style=\"color:#c11f1f\">0 ~ 2</span>ms(개선 전) / <span style=\"color:#c11f1f\">0 ~ 1</span>ms(개선 후)<p /></li>\n<li>쓰기: <span style=\"color:#c11f1f\">5 ~ 6</span>ms(개선 전) / <span style=\"color:#c11f1f\">0 ~ 1</span>ms(개선 후)<p /></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2>마치며</h2>\n<ul>\n<li>\n<p>이 코드는 <strong>ms 단위</strong>의 <strong>정확한 테스트</strong>를 위해 사용하기에는 무리가 따르며, 환경(브라우저)별, <strong>엔진 최적화</strong> 범위를 알 수 있는 정도로 사용하는것이 좋다.</p>\n</li>\n<li>\n<p>결과를 통해, 알 수 있듯이, <strong>최적화</strong>된 <strong>엔진</strong>을 보유한 대부분의 모던 브라우저에서는 <strong>식별자 검색</strong>에 대한 <span style=\"color:#c11f1f\">성능 차이</span>가 크게 존재하지 않았다.</p>\n</li>\n<li>\n<p>즉 <strong>App</strong> 이 오래된 브라우저를 지원하지 않아도 되는 경우에는, <strong>식별자 검색</strong>에 대한 성능 만큼은, 큰 <strong>이슈</strong>가 되지 않을 듯 하다.</p>\n</li>\n</ul>\n<h2>참고 URL</h2>\n<ul>\n<li><a href=\"http://mohwa.github.io/blog/javascript/2015/10/11/scope-chain-inJS/\">Scope Chain 그리고 Closure</a></li>\n</ul>","frontmatter":{"title":"식별자 검색 테스트","date":"November 12, 2015","description":null}},"previous":{"fields":{"slug":"/2015-10-30-variable-consider-inJS/"},"frontmatter":{"title":"GC 를 통한 객체 소멸 시점"}},"next":{"fields":{"slug":"/2015-10-16-JS-high-performance-book/"},"frontmatter":{"title":"Javascript 성능 최적화 책을 읽고.. - 데이터 접근 -"}}},"pageContext":{"id":"62abdd56-58e5-5e0f-b2bc-2c16a5383865","previousPostId":"dc44ed9e-95df-52e9-a3d2-5467de85d4f6","nextPostId":"abeecabc-17ed-57dc-b90f-b7e06a9a8094"}},
    "staticQueryHashes": ["2841359383","3257411868"]}