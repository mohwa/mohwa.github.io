{
    "componentChunkName": "component---src-templates-blog-post-js",
    "path": "/2015-08-07-struct-inJS/",
    "result": {"data":{"site":{"siteMetadata":{"title":"Mohwa Blog"}},"markdownRemark":{"id":"6e272a4f-601f-5d80-92ee-9285cf6f1c82","excerpt":"1. 정의 C 와 C++(또는 C# 등) 에서 구조화 된 데이터를 처리할 때, Struct 를 사용하는데 이를 구조체라 부른다. 최초의 구조체는 C…","html":"<h2>1. 정의</h2>\n<ul>\n<li>\n<p>C 와 C++(또는 C# 등) 에서 <strong>구조화 된 데이터</strong>를 처리할 때, <strong>Struct</strong> 를 사용하는데 이를 <a href=\"https://ko.wikipedia.org/wiki/Struct\">구조체</a>라 부른다.</p>\n<ul>\n<li>\n<p>최초의 <strong>구조체</strong>는 C 언어에서 다양한 <strong>자료구조</strong>를 하나의 <strong>집합</strong>으로 만들어 <strong>관리</strong>하기위해 만들어졌다.</p>\n<ul>\n<li>구조체는 하나 이상의 <strong>자료구조</strong>를 가진 또 하나의 <strong>데이터 타입</strong>을 정의한다.</li>\n</ul>\n</li>\n<li>\n<p>이 글은 <strong>구조체</strong>를 다루는 여러 언어 중 <code class=\"language-text\">[C# 구조체]</code> 를 기준으로 하고있다.</p>\n</li>\n</ul>\n<p><img src=\"http://mohwa.github.io/blog/assets/images/posts/struct_diagram.jpg?2\" alt=\"\"></p>\n<ul>\n<li>코드화</li>\n</ul>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"44259539139329294000\"\n              data-toaster-class=\"gatsby-code-button-toaster\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text\"\n              data-toaster-text=\"Copied!\"\n              data-toaster-duration=\"3500\"\n              onClick=\"copyToClipboard(`public struct Song\n{\n    public int lengthInSeconds, yearRecorded;\n\n    // 생성자\n    public Song(int p1, int p2)\n    {\n        lengthInSeconds = p1;\n        yearRecorded = p2;\n    }\n}\n\nclass TestSong\n{\n    static void Main()\n    {\n        // Initialize:\n        // 생성된 객체는 Stack 메모리에 객체가 할당된다.\n        Song song1 = new Song(213, 1994);\n        Song song2 = new Song(248, 1988);\n\n        // Display results:\n        Console.WriteLine(&quot;lengthInSeconds = {0}, yearRecorded = {1}&quot;, song1.lengthInSeconds, song1.yearRecorded);\n\n        Console.WriteLine(&quot;lengthInSeconds = {0}, yearRecorded = {1}&quot;, song2.lengthInSeconds, song2.yearRecorded);\n\n    }\n}\n\n/* Output:\n    lengthInSeconds = 213, yearRecorded = 1994\n    lengthInSeconds = 248, yearRecorded = 1988\n*/`, `44259539139329294000`)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-tooltip=\"\"\n              >\n                <?xml version=\"1.0\" encoding=\"utf-8\"?>\n<!-- Generator: Adobe Illustrator 19.1.0, SVG Export Plug-In . SVG Version: 6.00 Build 0)  -->\n<svg version=\"1.1\" id=\"Layer_1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\"\n\t viewBox=\"0 0 64 64\" enable-background=\"new 0 0 64 64\" xml:space=\"preserve\">\n<g id=\"Text-files\">\n\t<path d=\"M53.9791489,9.1429005H50.010849c-0.0826988,0-0.1562004,0.0283995-0.2331009,0.0469999V5.0228\n\t\tC49.7777481,2.253,47.4731483,0,44.6398468,0h-34.422596C7.3839517,0,5.0793519,2.253,5.0793519,5.0228v46.8432999\n\t\tc0,2.7697983,2.3045998,5.0228004,5.1378999,5.0228004h6.0367002v2.2678986C16.253952,61.8274002,18.4702511,64,21.1954517,64\n\t\th32.783699c2.7252007,0,4.9414978-2.1725998,4.9414978-4.8432007V13.9861002\n\t\tC58.9206467,11.3155003,56.7043495,9.1429005,53.9791489,9.1429005z M7.1110516,51.8661003V5.0228\n\t\tc0-1.6487999,1.3938999-2.9909999,3.1062002-2.9909999h34.422596c1.7123032,0,3.1062012,1.3422,3.1062012,2.9909999v46.8432999\n\t\tc0,1.6487999-1.393898,2.9911003-3.1062012,2.9911003h-34.422596C8.5049515,54.8572006,7.1110516,53.5149002,7.1110516,51.8661003z\n\t\t M56.8888474,59.1567993c0,1.550602-1.3055,2.8115005-2.9096985,2.8115005h-32.783699\n\t\tc-1.6042004,0-2.9097996-1.2608986-2.9097996-2.8115005v-2.2678986h26.3541946\n\t\tc2.8333015,0,5.1379013-2.2530022,5.1379013-5.0228004V11.1275997c0.0769005,0.0186005,0.1504021,0.0469999,0.2331009,0.0469999\n\t\th3.9682999c1.6041985,0,2.9096985,1.2609005,2.9096985,2.8115005V59.1567993z\"/>\n\t<path d=\"M38.6031494,13.2063999H16.253952c-0.5615005,0-1.0159006,0.4542999-1.0159006,1.0158005\n\t\tc0,0.5615997,0.4544001,1.0158997,1.0159006,1.0158997h22.3491974c0.5615005,0,1.0158997-0.4542999,1.0158997-1.0158997\n\t\tC39.6190491,13.6606998,39.16465,13.2063999,38.6031494,13.2063999z\"/>\n\t<path d=\"M38.6031494,21.3334007H16.253952c-0.5615005,0-1.0159006,0.4542999-1.0159006,1.0157986\n\t\tc0,0.5615005,0.4544001,1.0159016,1.0159006,1.0159016h22.3491974c0.5615005,0,1.0158997-0.454401,1.0158997-1.0159016\n\t\tC39.6190491,21.7877007,39.16465,21.3334007,38.6031494,21.3334007z\"/>\n\t<path d=\"M38.6031494,29.4603004H16.253952c-0.5615005,0-1.0159006,0.4543991-1.0159006,1.0158997\n\t\ts0.4544001,1.0158997,1.0159006,1.0158997h22.3491974c0.5615005,0,1.0158997-0.4543991,1.0158997-1.0158997\n\t\tS39.16465,29.4603004,38.6031494,29.4603004z\"/>\n\t<path d=\"M28.4444485,37.5872993H16.253952c-0.5615005,0-1.0159006,0.4543991-1.0159006,1.0158997\n\t\ts0.4544001,1.0158997,1.0159006,1.0158997h12.1904964c0.5615025,0,1.0158005-0.4543991,1.0158005-1.0158997\n\t\tS29.0059509,37.5872993,28.4444485,37.5872993z\"/>\n</g>\n<g>\n</g>\n<g>\n</g>\n<g>\n</g>\n<g>\n</g>\n<g>\n</g>\n<g>\n</g>\n<g>\n</g>\n<g>\n</g>\n<g>\n</g>\n<g>\n</g>\n<g>\n</g>\n<g>\n</g>\n<g>\n</g>\n<g>\n</g>\n<g>\n</g>\n</svg>\n\n              </div>\n            </div>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">public</span> struct Song\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> int lengthInSeconds<span class=\"token punctuation\">,</span> yearRecorded<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// 생성자</span>\n    <span class=\"token keyword\">public</span> <span class=\"token function\">Song</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">int p1<span class=\"token punctuation\">,</span> int p2</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        lengthInSeconds <span class=\"token operator\">=</span> p1<span class=\"token punctuation\">;</span>\n        yearRecorded <span class=\"token operator\">=</span> p2<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">TestSong</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">Main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// Initialize:</span>\n        <span class=\"token comment\">// 생성된 객체는 Stack 메모리에 객체가 할당된다.</span>\n        Song song1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Song</span><span class=\"token punctuation\">(</span><span class=\"token number\">213</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1994</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        Song song2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Song</span><span class=\"token punctuation\">(</span><span class=\"token number\">248</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1988</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// Display results:</span>\n        Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"lengthInSeconds = {0}, yearRecorded = {1}\"</span><span class=\"token punctuation\">,</span> song1<span class=\"token punctuation\">.</span>lengthInSeconds<span class=\"token punctuation\">,</span> song1<span class=\"token punctuation\">.</span>yearRecorded<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"lengthInSeconds = {0}, yearRecorded = {1}\"</span><span class=\"token punctuation\">,</span> song2<span class=\"token punctuation\">.</span>lengthInSeconds<span class=\"token punctuation\">,</span> song2<span class=\"token punctuation\">.</span>yearRecorded<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/* Output:\n    lengthInSeconds = 213, yearRecorded = 1994\n    lengthInSeconds = 248, yearRecorded = 1988\n*/</span></code></pre></div>\n<ul>\n<li>\n<p><strong>구조체</strong>는 <strong>Class</strong> 와 같이 여러 특성(생성자, 상수, 필드, 메서드, 속성, 인덱서, 연산자, 이벤트 등)들을 <strong>그룹화</strong> 하는데 사용된다.</p>\n<ul>\n<li><strong>구조체</strong>와 <strong>클래스</strong>는 매우 비슷한 <strong>구조</strong>를 가지고 있으며, <u><strong>사용 방법</strong> 및 <strong>적용 이유</strong></u>가 유사하다.</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2>2. C# 구조체의 특징</h2>\n<ul>\n<li>\n<p><code class=\"language-text\">값 타입</code>이다.</p>\n<ul>\n<li>\n<p><a href=\"https://msdn.microsoft.com/ko-kr/library/4d43ts61(v=vs.90).aspx\">값 형식 및 참조 형식</a></p>\n</li>\n<li>\n<p>[Six important .NET concepts: Stack, heap, value types, reference types, boxing, and unboxing]</p>\n<p><img src=\"http://mohwa.github.io/blog/assets/images/posts/memoryDiagram.jpg?2\" alt=\"\"></p>\n<ul>\n<li><a href=\"http://www.codeproject.com/Articles/76153/Six-important-NET-concepts-Stack-\">http://www.codeproject.com/Articles/76153/Six-important-NET-concepts-Stack-</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>생성된 객체는 <strong>Stack</strong> 메모리에 할당된다.</p>\n</li>\n<li>\n<p><strong>구조체</strong>는 보통 <u>작은 데이터</u>를 다루는데 <strong>적합</strong>하다.</p>\n<ul>\n<li>\n<p>하지만 <strong>이것</strong>을 <strong>클래스</strong>로 <span style=\"color:#c11f1f\">표현할 수 없는 것</span>은 아니다.(그냥 작은 Class를 만들면 그만이다;;)</p>\n<ul>\n<li><em>그럼에도 불구하고 <code class=\"language-text\">구조체</code>를 써야하는 이유는 <u>분명 존재</u>할 것이다.</em></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p><strong>new</strong> 연산자를 사용하지 않고도 <strong>인스턴스화</strong>할 수 있다.</p>\n<ul>\n<li>하지만 <u><strong>생성자</strong>를 호출하지 않으므로</u>, 선언된 맴버를 따로 <strong>초기화</strong> 해야하는 <span style=\"color:#c11f1f\">불편함</span>이 존재한다.</li>\n</ul>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"37278763786364300000\"\n              data-toaster-class=\"gatsby-code-button-toaster\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text\"\n              data-toaster-text=\"Copied!\"\n              data-toaster-duration=\"3500\"\n              onClick=\"copyToClipboard(`public struct Song\n{\n\tpublic int lengthInSeconds, yearRecorded;\n\n\t// 생성자\n\tpublic Song(int p1, int p2)\n\t{\n\t\tlengthInSeconds = p1;\n\t\tyearRecorded = p2;\n\t}\n}\n\nclass TestSongNoNew\n{\n\tstatic void Main()\n\t{\n\t\t// new 연산자 없이 인스턴스를 생성한다.\n\t\t// Stack 메모리에 객체가 할당된다.\n\t\t// 생성자를 호출하지 않는다.\n\t\tSong song1;\n\n\t\t// 속성 초기화\n\t\tsong1.lengthInSeconds = 213;\n\t\tsong1.yearRecorded = 1994;\n\n\t\t// Display results:\n\t\tConsole.WriteLine(&quot;lengthInSeconds = {0}, yearRecorded = {1}&quot;, song1.lengthInSeconds, song1.yearRecorded);\n\n\t}\n}\n\n/* Output:\n\tlengthInSeconds = 213, yearRecorded = 1994\n*/`, `37278763786364300000`)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-tooltip=\"\"\n              >\n                <?xml version=\"1.0\" encoding=\"utf-8\"?>\n<!-- Generator: Adobe Illustrator 19.1.0, SVG Export Plug-In . SVG Version: 6.00 Build 0)  -->\n<svg version=\"1.1\" id=\"Layer_1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\"\n\t viewBox=\"0 0 64 64\" enable-background=\"new 0 0 64 64\" xml:space=\"preserve\">\n<g id=\"Text-files\">\n\t<path d=\"M53.9791489,9.1429005H50.010849c-0.0826988,0-0.1562004,0.0283995-0.2331009,0.0469999V5.0228\n\t\tC49.7777481,2.253,47.4731483,0,44.6398468,0h-34.422596C7.3839517,0,5.0793519,2.253,5.0793519,5.0228v46.8432999\n\t\tc0,2.7697983,2.3045998,5.0228004,5.1378999,5.0228004h6.0367002v2.2678986C16.253952,61.8274002,18.4702511,64,21.1954517,64\n\t\th32.783699c2.7252007,0,4.9414978-2.1725998,4.9414978-4.8432007V13.9861002\n\t\tC58.9206467,11.3155003,56.7043495,9.1429005,53.9791489,9.1429005z M7.1110516,51.8661003V5.0228\n\t\tc0-1.6487999,1.3938999-2.9909999,3.1062002-2.9909999h34.422596c1.7123032,0,3.1062012,1.3422,3.1062012,2.9909999v46.8432999\n\t\tc0,1.6487999-1.393898,2.9911003-3.1062012,2.9911003h-34.422596C8.5049515,54.8572006,7.1110516,53.5149002,7.1110516,51.8661003z\n\t\t M56.8888474,59.1567993c0,1.550602-1.3055,2.8115005-2.9096985,2.8115005h-32.783699\n\t\tc-1.6042004,0-2.9097996-1.2608986-2.9097996-2.8115005v-2.2678986h26.3541946\n\t\tc2.8333015,0,5.1379013-2.2530022,5.1379013-5.0228004V11.1275997c0.0769005,0.0186005,0.1504021,0.0469999,0.2331009,0.0469999\n\t\th3.9682999c1.6041985,0,2.9096985,1.2609005,2.9096985,2.8115005V59.1567993z\"/>\n\t<path d=\"M38.6031494,13.2063999H16.253952c-0.5615005,0-1.0159006,0.4542999-1.0159006,1.0158005\n\t\tc0,0.5615997,0.4544001,1.0158997,1.0159006,1.0158997h22.3491974c0.5615005,0,1.0158997-0.4542999,1.0158997-1.0158997\n\t\tC39.6190491,13.6606998,39.16465,13.2063999,38.6031494,13.2063999z\"/>\n\t<path d=\"M38.6031494,21.3334007H16.253952c-0.5615005,0-1.0159006,0.4542999-1.0159006,1.0157986\n\t\tc0,0.5615005,0.4544001,1.0159016,1.0159006,1.0159016h22.3491974c0.5615005,0,1.0158997-0.454401,1.0158997-1.0159016\n\t\tC39.6190491,21.7877007,39.16465,21.3334007,38.6031494,21.3334007z\"/>\n\t<path d=\"M38.6031494,29.4603004H16.253952c-0.5615005,0-1.0159006,0.4543991-1.0159006,1.0158997\n\t\ts0.4544001,1.0158997,1.0159006,1.0158997h22.3491974c0.5615005,0,1.0158997-0.4543991,1.0158997-1.0158997\n\t\tS39.16465,29.4603004,38.6031494,29.4603004z\"/>\n\t<path d=\"M28.4444485,37.5872993H16.253952c-0.5615005,0-1.0159006,0.4543991-1.0159006,1.0158997\n\t\ts0.4544001,1.0158997,1.0159006,1.0158997h12.1904964c0.5615025,0,1.0158005-0.4543991,1.0158005-1.0158997\n\t\tS29.0059509,37.5872993,28.4444485,37.5872993z\"/>\n</g>\n<g>\n</g>\n<g>\n</g>\n<g>\n</g>\n<g>\n</g>\n<g>\n</g>\n<g>\n</g>\n<g>\n</g>\n<g>\n</g>\n<g>\n</g>\n<g>\n</g>\n<g>\n</g>\n<g>\n</g>\n<g>\n</g>\n<g>\n</g>\n<g>\n</g>\n</svg>\n\n              </div>\n            </div>\n<div class=\"gatsby-highlight\" data-language=\"c#\"><pre class=\"language-c#\"><code class=\"language-c#\">public struct Song\n{\n\tpublic int lengthInSeconds, yearRecorded;\n\n\t// 생성자\n\tpublic Song(int p1, int p2)\n\t{\n\t\tlengthInSeconds = p1;\n\t\tyearRecorded = p2;\n\t}\n}\n\nclass TestSongNoNew\n{\n\tstatic void Main()\n\t{\n\t\t// new 연산자 없이 인스턴스를 생성한다.\n\t\t// Stack 메모리에 객체가 할당된다.\n\t\t// 생성자를 호출하지 않는다.\n\t\tSong song1;\n\n\t\t// 속성 초기화\n\t\tsong1.lengthInSeconds = 213;\n\t\tsong1.yearRecorded = 1994;\n\n\t\t// Display results:\n\t\tConsole.WriteLine(&quot;lengthInSeconds = {0}, yearRecorded = {1}&quot;, song1.lengthInSeconds, song1.yearRecorded);\n\n\t}\n}\n\n/* Output:\n\tlengthInSeconds = 213, yearRecorded = 1994\n*/</code></pre></div>\n</li>\n<li>\n<p><strong>구조체</strong>는 <strong>구조체</strong> 또는 <strong>클래스</strong>에서 <u>상속될 수 없으며</u>, 클래스의 기본 클래스가 될 수 없다.</p>\n<ul>\n<li><strong>클래스</strong>와 달리, 상속 구조를 구현할 수 없다.</li>\n</ul>\n</li>\n<li>\n<p><strong>클래스</strong>와 같이 <u><strong>인터페이스</strong>를 구현할 수 있다.</u></p>\n</li>\n<li>\n<p>구조체는 <strong>Stack</strong> 영역에 할당되는 **<span style=\"color:#c11f1f\">값 타입</span>**이고, 클래스는 <strong>Heap</strong> 영역에 할당되는 **<span style=\"color:#c11f1f\">참조 타입</span>**이다.</p>\n<ul>\n<li>\n<p><strong>Stack</strong> 영역(<span style=\"color:#c11f1f\">정적 할당</span>)이란?</p>\n<p><img src=\"http://mohwa.github.io/blog/assets/images/posts/struct_stack.jpg\" alt=\"\"></p>\n</li>\n<li>\n<p><strong>Stack</strong> 영역은 <strong>컴파일 시점</strong>에서 크기가 <strong>결정</strong>되는 요소들이 저장되는 <strong>메모리 영역</strong>이다.</p>\n<ul>\n<li>함수 내부 <strong>지역 변수</strong> 와 <strong>매개 변수</strong>는 <strong>Stack</strong> 영역에 할당되며, 함수 종료 시 <strong>소멸</strong>된다.</li>\n</ul>\n</li>\n<li>\n<p><strong>Stack</strong> 영역은 <strong>LIFO</strong>(Last In First out)라는 <strong>자료구조</strong> 가진다.</p>\n<ul>\n<li>\n<p><em>즉 마지막에 넣은(Push) 데이터가 <code class=\"language-text\">가장 먼저</code> 나가는것을(Pop) 의미한다.</em></p>\n<ul>\n<li>\n<p>Stack Push 순서:</p>\n<ul>\n<li>A > B > C > D > E</li>\n</ul>\n</li>\n<li>\n<p>Stack Pop 순서:</p>\n<ul>\n<li>E > D > C > B > A</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>그럼 <strong>JS Stack</strong> 은?</p>\n<ul>\n<li>\n<p>JS 는 <a href=\"https://ko.wikipedia.org/wiki/%EB%8F%99%EC%A0%81_%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D_%EC%96%B8%EC%96%B4\"><strong>동적 언어</strong></a> 이므로 <strong>컴파일 시점</strong>이 아닌 <strong>런타임 시점</strong>에서 메모리가 <strong>할당</strong>(allocation)된다.</p>\n<ul>\n<li>C, C++, C#(<strong>정적 언어</strong>)</li>\n</ul>\n</li>\n<li>\n<p>JS <strong>원시 타입</strong>(string, number, boolean, undefined, null)은 <strong>고정된 크기</strong>를 가지며, <strong>Stack</strong> 메모리 영역에 할당된다.</p>\n</li>\n<li>\n<p>JS 의 모든 <strong>실행 컨텍스트</strong>는 <span style=\"color:#c11f1f\">ECStack</span>(일종의 <a href=\"https://ko.wikipedia.org/wiki/%EC%BD%9C_%EC%8A%A4%ED%83%9D\">Call Stack</a>) 내부로 할당된다.</p>\n<ul>\n<li>\n<p>아래와 같은 방법으로 <code class=\"language-text\">ECStack Count</code> 를 셀 수 있다.</p>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"67630440136544756000\"\n              data-toaster-class=\"gatsby-code-button-toaster\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text\"\n              data-toaster-text=\"Copied!\"\n              data-toaster-duration=\"3500\"\n              onClick=\"copyToClipboard(`function getStackCount(){\n\n\tvar i = 0;\n\n\ttry{\n\t\t(function _stack(){\n\n\t\t\t++i && arguments.callee();\n\t\t})();\n\t}\n\tcatch(e){\n\n\t\tconsole.log(e.message);\n\n\t\treturn i;\n\t}\n}\n\n// get call stack count\nconsole.log('call stack count: ' + getStackCount());\n\n/* output\n\n Maximum call stack size exceeded\n\n // 15,745 번 함수 호출 후 Stack overflow 가 발생했다.\n call stack count: 15745\n\n */`, `67630440136544756000`)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-tooltip=\"\"\n              >\n                <?xml version=\"1.0\" encoding=\"utf-8\"?>\n<!-- Generator: Adobe Illustrator 19.1.0, SVG Export Plug-In . SVG Version: 6.00 Build 0)  -->\n<svg version=\"1.1\" id=\"Layer_1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\"\n\t viewBox=\"0 0 64 64\" enable-background=\"new 0 0 64 64\" xml:space=\"preserve\">\n<g id=\"Text-files\">\n\t<path d=\"M53.9791489,9.1429005H50.010849c-0.0826988,0-0.1562004,0.0283995-0.2331009,0.0469999V5.0228\n\t\tC49.7777481,2.253,47.4731483,0,44.6398468,0h-34.422596C7.3839517,0,5.0793519,2.253,5.0793519,5.0228v46.8432999\n\t\tc0,2.7697983,2.3045998,5.0228004,5.1378999,5.0228004h6.0367002v2.2678986C16.253952,61.8274002,18.4702511,64,21.1954517,64\n\t\th32.783699c2.7252007,0,4.9414978-2.1725998,4.9414978-4.8432007V13.9861002\n\t\tC58.9206467,11.3155003,56.7043495,9.1429005,53.9791489,9.1429005z M7.1110516,51.8661003V5.0228\n\t\tc0-1.6487999,1.3938999-2.9909999,3.1062002-2.9909999h34.422596c1.7123032,0,3.1062012,1.3422,3.1062012,2.9909999v46.8432999\n\t\tc0,1.6487999-1.393898,2.9911003-3.1062012,2.9911003h-34.422596C8.5049515,54.8572006,7.1110516,53.5149002,7.1110516,51.8661003z\n\t\t M56.8888474,59.1567993c0,1.550602-1.3055,2.8115005-2.9096985,2.8115005h-32.783699\n\t\tc-1.6042004,0-2.9097996-1.2608986-2.9097996-2.8115005v-2.2678986h26.3541946\n\t\tc2.8333015,0,5.1379013-2.2530022,5.1379013-5.0228004V11.1275997c0.0769005,0.0186005,0.1504021,0.0469999,0.2331009,0.0469999\n\t\th3.9682999c1.6041985,0,2.9096985,1.2609005,2.9096985,2.8115005V59.1567993z\"/>\n\t<path d=\"M38.6031494,13.2063999H16.253952c-0.5615005,0-1.0159006,0.4542999-1.0159006,1.0158005\n\t\tc0,0.5615997,0.4544001,1.0158997,1.0159006,1.0158997h22.3491974c0.5615005,0,1.0158997-0.4542999,1.0158997-1.0158997\n\t\tC39.6190491,13.6606998,39.16465,13.2063999,38.6031494,13.2063999z\"/>\n\t<path d=\"M38.6031494,21.3334007H16.253952c-0.5615005,0-1.0159006,0.4542999-1.0159006,1.0157986\n\t\tc0,0.5615005,0.4544001,1.0159016,1.0159006,1.0159016h22.3491974c0.5615005,0,1.0158997-0.454401,1.0158997-1.0159016\n\t\tC39.6190491,21.7877007,39.16465,21.3334007,38.6031494,21.3334007z\"/>\n\t<path d=\"M38.6031494,29.4603004H16.253952c-0.5615005,0-1.0159006,0.4543991-1.0159006,1.0158997\n\t\ts0.4544001,1.0158997,1.0159006,1.0158997h22.3491974c0.5615005,0,1.0158997-0.4543991,1.0158997-1.0158997\n\t\tS39.16465,29.4603004,38.6031494,29.4603004z\"/>\n\t<path d=\"M28.4444485,37.5872993H16.253952c-0.5615005,0-1.0159006,0.4543991-1.0159006,1.0158997\n\t\ts0.4544001,1.0158997,1.0159006,1.0158997h12.1904964c0.5615025,0,1.0158005-0.4543991,1.0158005-1.0158997\n\t\tS29.0059509,37.5872993,28.4444485,37.5872993z\"/>\n</g>\n<g>\n</g>\n<g>\n</g>\n<g>\n</g>\n<g>\n</g>\n<g>\n</g>\n<g>\n</g>\n<g>\n</g>\n<g>\n</g>\n<g>\n</g>\n<g>\n</g>\n<g>\n</g>\n<g>\n</g>\n<g>\n</g>\n<g>\n</g>\n<g>\n</g>\n</svg>\n\n              </div>\n            </div>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">getStackCount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\n\t<span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">try</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token function\">_stack</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\n\t\t\t<span class=\"token operator\">++</span>i <span class=\"token operator\">&amp;&amp;</span> arguments<span class=\"token punctuation\">.</span><span class=\"token function\">callee</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\n\t\tconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token keyword\">return</span> i<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// get call stack count</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'call stack count: '</span> <span class=\"token operator\">+</span> <span class=\"token function\">getStackCount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/* output\n\n Maximum call stack size exceeded\n\n // 15,745 번 함수 호출 후 Stack overflow 가 발생했다.\n call stack count: 15745\n\n */</span></code></pre></div>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p><strong>Heap</strong> 영역(<span style=\"color:#c11f1f\">동적 할당</span>)이란?</p>\n<ul>\n<li>\n<p><strong>Heap</strong> 영역은 <strong>런타임 시점</strong>에서 크기가 <strong>결정</strong>되는 요소들이 저장되는 <strong>메모리 영역</strong>이다.</p>\n<ul>\n<li>Object 또는 Array Data Type 등을 가진다.</li>\n</ul>\n</li>\n<li>\n<p><strong>Heap</strong> 영역은 <strong>런타임 시점</strong>에서 메모리를 <u><strong>가변적</strong>으로 <strong>동적</strong> <span style=\"color:#c11f1f\">할당</span> 및 <span style=\"color:#c11f1f\">반환</span>(GC를 통해) 시키는 구조</u>를 가진다.</p>\n</li>\n<li>\n<p><strong>GC</strong>는 <strong>할당</strong>된 <strong>Heap</strong> 메모리 영역의 <span style=\"color:#c11f1f\">반환</span>(de-allocated(수거))을 담당한다.</p>\n<ul>\n<li>\n<p><strong>GC</strong>(Garbage Collection)란?</p>\n<ul>\n<li>\n<p><strong>자동 메모리 관리</strong>의 한 형태이며, 프로세스 수행 중, 더 이상 필요가 없어진 <strong>객체</strong>가 점유하는 <u>메모리에 대해 <span style=\"color:#c11f1f\">반환</span> 작업을 수행</u>한다.</p>\n</li>\n<li>\n<p>프로그래머가 직접 메모리를 <span style=\"color:#c11f1f\">반환</span>할 수는 없다.(반드시 <code class=\"language-text\">GC</code>를 통해 반환된다)</p>\n</li>\n<li>\n<p>단 GC에게 메모리 <u><strong>반환</strong> 조건</u>을 만들어 줄 수는 있다.</p>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"39736897868860120000\"\n              data-toaster-class=\"gatsby-code-button-toaster\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text\"\n              data-toaster-text=\"Copied!\"\n              data-toaster-duration=\"3500\"\n              onClick=\"copyToClipboard(`\nvar obj = {x: 1, y: 2};\n\n// GC에게 메모리 반환 조건을 만들어 준다.\nobj = null;\n`, `39736897868860120000`)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-tooltip=\"\"\n              >\n                <?xml version=\"1.0\" encoding=\"utf-8\"?>\n<!-- Generator: Adobe Illustrator 19.1.0, SVG Export Plug-In . SVG Version: 6.00 Build 0)  -->\n<svg version=\"1.1\" id=\"Layer_1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\"\n\t viewBox=\"0 0 64 64\" enable-background=\"new 0 0 64 64\" xml:space=\"preserve\">\n<g id=\"Text-files\">\n\t<path d=\"M53.9791489,9.1429005H50.010849c-0.0826988,0-0.1562004,0.0283995-0.2331009,0.0469999V5.0228\n\t\tC49.7777481,2.253,47.4731483,0,44.6398468,0h-34.422596C7.3839517,0,5.0793519,2.253,5.0793519,5.0228v46.8432999\n\t\tc0,2.7697983,2.3045998,5.0228004,5.1378999,5.0228004h6.0367002v2.2678986C16.253952,61.8274002,18.4702511,64,21.1954517,64\n\t\th32.783699c2.7252007,0,4.9414978-2.1725998,4.9414978-4.8432007V13.9861002\n\t\tC58.9206467,11.3155003,56.7043495,9.1429005,53.9791489,9.1429005z M7.1110516,51.8661003V5.0228\n\t\tc0-1.6487999,1.3938999-2.9909999,3.1062002-2.9909999h34.422596c1.7123032,0,3.1062012,1.3422,3.1062012,2.9909999v46.8432999\n\t\tc0,1.6487999-1.393898,2.9911003-3.1062012,2.9911003h-34.422596C8.5049515,54.8572006,7.1110516,53.5149002,7.1110516,51.8661003z\n\t\t M56.8888474,59.1567993c0,1.550602-1.3055,2.8115005-2.9096985,2.8115005h-32.783699\n\t\tc-1.6042004,0-2.9097996-1.2608986-2.9097996-2.8115005v-2.2678986h26.3541946\n\t\tc2.8333015,0,5.1379013-2.2530022,5.1379013-5.0228004V11.1275997c0.0769005,0.0186005,0.1504021,0.0469999,0.2331009,0.0469999\n\t\th3.9682999c1.6041985,0,2.9096985,1.2609005,2.9096985,2.8115005V59.1567993z\"/>\n\t<path d=\"M38.6031494,13.2063999H16.253952c-0.5615005,0-1.0159006,0.4542999-1.0159006,1.0158005\n\t\tc0,0.5615997,0.4544001,1.0158997,1.0159006,1.0158997h22.3491974c0.5615005,0,1.0158997-0.4542999,1.0158997-1.0158997\n\t\tC39.6190491,13.6606998,39.16465,13.2063999,38.6031494,13.2063999z\"/>\n\t<path d=\"M38.6031494,21.3334007H16.253952c-0.5615005,0-1.0159006,0.4542999-1.0159006,1.0157986\n\t\tc0,0.5615005,0.4544001,1.0159016,1.0159006,1.0159016h22.3491974c0.5615005,0,1.0158997-0.454401,1.0158997-1.0159016\n\t\tC39.6190491,21.7877007,39.16465,21.3334007,38.6031494,21.3334007z\"/>\n\t<path d=\"M38.6031494,29.4603004H16.253952c-0.5615005,0-1.0159006,0.4543991-1.0159006,1.0158997\n\t\ts0.4544001,1.0158997,1.0159006,1.0158997h22.3491974c0.5615005,0,1.0158997-0.4543991,1.0158997-1.0158997\n\t\tS39.16465,29.4603004,38.6031494,29.4603004z\"/>\n\t<path d=\"M28.4444485,37.5872993H16.253952c-0.5615005,0-1.0159006,0.4543991-1.0159006,1.0158997\n\t\ts0.4544001,1.0158997,1.0159006,1.0158997h12.1904964c0.5615025,0,1.0158005-0.4543991,1.0158005-1.0158997\n\t\tS29.0059509,37.5872993,28.4444485,37.5872993z\"/>\n</g>\n<g>\n</g>\n<g>\n</g>\n<g>\n</g>\n<g>\n</g>\n<g>\n</g>\n<g>\n</g>\n<g>\n</g>\n<g>\n</g>\n<g>\n</g>\n<g>\n</g>\n<g>\n</g>\n<g>\n</g>\n<g>\n</g>\n<g>\n</g>\n<g>\n</g>\n</svg>\n\n              </div>\n            </div>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">\n<span class=\"token keyword\">var</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token literal-property property\">x</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">y</span><span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// GC에게 메모리 반환 조건을 만들어 준다.</span>\nobj <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>JS <strong>Heap</strong> 메모리 영역 테스트 해보기!!</p>\n<ul>\n<li>\n<p>V8 <strong>Handle scope</strong> Diagram</p>\n<p><img src=\"http://mohwa.github.io/blog/assets/images/posts/handleV8.jpg\" alt=\"\"></p>\n</li>\n<li>\n<p>아래 코드는 <strong>Heap</strong> 메모리 영역에 <strong>객체</strong>를 <span style=\"color:#c11f1f\">할당</span>하는 예제이다.</p>\n</li>\n</ul>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"40124591353350870000\"\n              data-toaster-class=\"gatsby-code-button-toaster\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text\"\n              data-toaster-text=\"Copied!\"\n              data-toaster-duration=\"3500\"\n              onClick=\"copyToClipboard(`// global execution context\n\n// 전역 실행 컨텍스트에서 함수 객체를 하나 선언한다.\n\n// 선언된 함수 객체는 Heap 메모리 영역에 할당된다.\nfunction globalA(){\n\tthis.x = 1;\n\tthis.y = 2;\n}\n\nfunction init(){\n\n\t// _global 전역 변수에 생성된 인스턴스를 할당한다.\n\t// 이때 전역 변수(참조 변수)는 Heap 메모리 영역에 할당된 객체를 참조하게된다.\n\n\t_global = new globalA();\n}\n\ninit();`, `40124591353350870000`)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-tooltip=\"\"\n              >\n                <?xml version=\"1.0\" encoding=\"utf-8\"?>\n<!-- Generator: Adobe Illustrator 19.1.0, SVG Export Plug-In . SVG Version: 6.00 Build 0)  -->\n<svg version=\"1.1\" id=\"Layer_1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\"\n\t viewBox=\"0 0 64 64\" enable-background=\"new 0 0 64 64\" xml:space=\"preserve\">\n<g id=\"Text-files\">\n\t<path d=\"M53.9791489,9.1429005H50.010849c-0.0826988,0-0.1562004,0.0283995-0.2331009,0.0469999V5.0228\n\t\tC49.7777481,2.253,47.4731483,0,44.6398468,0h-34.422596C7.3839517,0,5.0793519,2.253,5.0793519,5.0228v46.8432999\n\t\tc0,2.7697983,2.3045998,5.0228004,5.1378999,5.0228004h6.0367002v2.2678986C16.253952,61.8274002,18.4702511,64,21.1954517,64\n\t\th32.783699c2.7252007,0,4.9414978-2.1725998,4.9414978-4.8432007V13.9861002\n\t\tC58.9206467,11.3155003,56.7043495,9.1429005,53.9791489,9.1429005z M7.1110516,51.8661003V5.0228\n\t\tc0-1.6487999,1.3938999-2.9909999,3.1062002-2.9909999h34.422596c1.7123032,0,3.1062012,1.3422,3.1062012,2.9909999v46.8432999\n\t\tc0,1.6487999-1.393898,2.9911003-3.1062012,2.9911003h-34.422596C8.5049515,54.8572006,7.1110516,53.5149002,7.1110516,51.8661003z\n\t\t M56.8888474,59.1567993c0,1.550602-1.3055,2.8115005-2.9096985,2.8115005h-32.783699\n\t\tc-1.6042004,0-2.9097996-1.2608986-2.9097996-2.8115005v-2.2678986h26.3541946\n\t\tc2.8333015,0,5.1379013-2.2530022,5.1379013-5.0228004V11.1275997c0.0769005,0.0186005,0.1504021,0.0469999,0.2331009,0.0469999\n\t\th3.9682999c1.6041985,0,2.9096985,1.2609005,2.9096985,2.8115005V59.1567993z\"/>\n\t<path d=\"M38.6031494,13.2063999H16.253952c-0.5615005,0-1.0159006,0.4542999-1.0159006,1.0158005\n\t\tc0,0.5615997,0.4544001,1.0158997,1.0159006,1.0158997h22.3491974c0.5615005,0,1.0158997-0.4542999,1.0158997-1.0158997\n\t\tC39.6190491,13.6606998,39.16465,13.2063999,38.6031494,13.2063999z\"/>\n\t<path d=\"M38.6031494,21.3334007H16.253952c-0.5615005,0-1.0159006,0.4542999-1.0159006,1.0157986\n\t\tc0,0.5615005,0.4544001,1.0159016,1.0159006,1.0159016h22.3491974c0.5615005,0,1.0158997-0.454401,1.0158997-1.0159016\n\t\tC39.6190491,21.7877007,39.16465,21.3334007,38.6031494,21.3334007z\"/>\n\t<path d=\"M38.6031494,29.4603004H16.253952c-0.5615005,0-1.0159006,0.4543991-1.0159006,1.0158997\n\t\ts0.4544001,1.0158997,1.0159006,1.0158997h22.3491974c0.5615005,0,1.0158997-0.4543991,1.0158997-1.0158997\n\t\tS39.16465,29.4603004,38.6031494,29.4603004z\"/>\n\t<path d=\"M28.4444485,37.5872993H16.253952c-0.5615005,0-1.0159006,0.4543991-1.0159006,1.0158997\n\t\ts0.4544001,1.0158997,1.0159006,1.0158997h12.1904964c0.5615025,0,1.0158005-0.4543991,1.0158005-1.0158997\n\t\tS29.0059509,37.5872993,28.4444485,37.5872993z\"/>\n</g>\n<g>\n</g>\n<g>\n</g>\n<g>\n</g>\n<g>\n</g>\n<g>\n</g>\n<g>\n</g>\n<g>\n</g>\n<g>\n</g>\n<g>\n</g>\n<g>\n</g>\n<g>\n</g>\n<g>\n</g>\n<g>\n</g>\n<g>\n</g>\n<g>\n</g>\n</svg>\n\n              </div>\n            </div>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// global execution context</span>\n\n<span class=\"token comment\">// 전역 실행 컨텍스트에서 함수 객체를 하나 선언한다.</span>\n\n<span class=\"token comment\">// 선언된 함수 객체는 Heap 메모리 영역에 할당된다.</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">globalA</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>x <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>y <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\n\t<span class=\"token comment\">// _global 전역 변수에 생성된 인스턴스를 할당한다.</span>\n\t<span class=\"token comment\">// 이때 전역 변수(참조 변수)는 Heap 메모리 영역에 할당된 객체를 참조하게된다.</span>\n\n\t_global <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">globalA</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<ul>\n<li>\n<p><strong>전역 실행 컨텍스트</strong>에서 선언된 <strong>globalA</strong> 함수 객체의 <strong>Heap</strong> 메모리 영역.</p>\n<p><img src=\"http://mohwa.github.io/blog/assets/images/posts/heapSnapShot0.jpg\" alt=\"\"></p>\n</li>\n<li>\n<p><strong>_global</strong> 전역 변수가 참조하는 <strong>객체</strong>의 <strong>Heap</strong> 메모리 영역.</p>\n<p><img src=\"http://mohwa.github.io/blog/assets/images/posts/heapSnapShot1.jpg\" alt=\"\"></p>\n</li>\n<li>\n<p><span style=\"color:#c11f1f\">Chrome Inspector</span>를 통해 할당된 <strong>Heap 메모리 영역</strong>을 살펴볼 수 있다.</p>\n<ul>\n<li><a href=\"http://stackoverflow.com/questions/20697298/understanding-chrome-heap-profile\">understanding chrome heap profile</a></li>\n</ul>\n</li>\n<li>\n<p>만약 함수 <strong>지역 변수</strong>에 <strong>객체</strong>를 할당했다면, 그 객체(<strong>Heap</strong> 영역)의 메모리 <strong><span style=\"color:#c11f1f\">반환</span></strong> <strong>시점</strong>은 언제일까?</p>\n<ul>\n<li>\n<p><em>결론: <code class=\"language-text\">지역 변수</code>에 할당된 객체 메모리 <span style=\"color:#c11f1f\">반환</span> 시점은 <u><strong>함수 종료 시점</strong></u>이 된다.</em></p>\n<ul>\n<li>\n<p>테스트 1: <code class=\"language-text\">전역 변수</code>와 함수 <code class=\"language-text\">지역 변수</code>에 동일한 <code class=\"language-text\">객체</code>를 할당해본 후 <code class=\"language-text\">Profile</code> 을 통해 <code class=\"language-text\">Heap</code> 영역을 관찰해본다.</p>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"13315750709336994000\"\n              data-toaster-class=\"gatsby-code-button-toaster\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text\"\n              data-toaster-text=\"Copied!\"\n              data-toaster-duration=\"3500\"\n              onClick=\"copyToClipboard(`// global execution context\n\n// 전역 실행 컨텍스트에서 함수 객체를 하나 선언한다.\n\n// 선언된 함수 객체는 Heap 메모리 영역에 할당된다.\nfunction globalA(){\n\tthis.x = 1;\n\tthis.y = 2;\n}\n\nfunction init(){\n\n\t// _district 지역 변수에 생성된 인스턴스를 할당한다.\n\t// 이때 지역 변수(참조 변수)는 Heap 메모리 영역에 할당된 객체를 참조하게된다.\n\n\t// 단 지역 변수에 할당된 객체의 &quot;메모리 반환 시점&quot;은, 함수 종료 시점(함수 실행 컨텍스트 종료 시점)이 된다.\n\n\tvar _district = new globalA();\n}\n\ninit();`, `13315750709336994000`)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-tooltip=\"\"\n              >\n                <?xml version=\"1.0\" encoding=\"utf-8\"?>\n<!-- Generator: Adobe Illustrator 19.1.0, SVG Export Plug-In . SVG Version: 6.00 Build 0)  -->\n<svg version=\"1.1\" id=\"Layer_1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\"\n\t viewBox=\"0 0 64 64\" enable-background=\"new 0 0 64 64\" xml:space=\"preserve\">\n<g id=\"Text-files\">\n\t<path d=\"M53.9791489,9.1429005H50.010849c-0.0826988,0-0.1562004,0.0283995-0.2331009,0.0469999V5.0228\n\t\tC49.7777481,2.253,47.4731483,0,44.6398468,0h-34.422596C7.3839517,0,5.0793519,2.253,5.0793519,5.0228v46.8432999\n\t\tc0,2.7697983,2.3045998,5.0228004,5.1378999,5.0228004h6.0367002v2.2678986C16.253952,61.8274002,18.4702511,64,21.1954517,64\n\t\th32.783699c2.7252007,0,4.9414978-2.1725998,4.9414978-4.8432007V13.9861002\n\t\tC58.9206467,11.3155003,56.7043495,9.1429005,53.9791489,9.1429005z M7.1110516,51.8661003V5.0228\n\t\tc0-1.6487999,1.3938999-2.9909999,3.1062002-2.9909999h34.422596c1.7123032,0,3.1062012,1.3422,3.1062012,2.9909999v46.8432999\n\t\tc0,1.6487999-1.393898,2.9911003-3.1062012,2.9911003h-34.422596C8.5049515,54.8572006,7.1110516,53.5149002,7.1110516,51.8661003z\n\t\t M56.8888474,59.1567993c0,1.550602-1.3055,2.8115005-2.9096985,2.8115005h-32.783699\n\t\tc-1.6042004,0-2.9097996-1.2608986-2.9097996-2.8115005v-2.2678986h26.3541946\n\t\tc2.8333015,0,5.1379013-2.2530022,5.1379013-5.0228004V11.1275997c0.0769005,0.0186005,0.1504021,0.0469999,0.2331009,0.0469999\n\t\th3.9682999c1.6041985,0,2.9096985,1.2609005,2.9096985,2.8115005V59.1567993z\"/>\n\t<path d=\"M38.6031494,13.2063999H16.253952c-0.5615005,0-1.0159006,0.4542999-1.0159006,1.0158005\n\t\tc0,0.5615997,0.4544001,1.0158997,1.0159006,1.0158997h22.3491974c0.5615005,0,1.0158997-0.4542999,1.0158997-1.0158997\n\t\tC39.6190491,13.6606998,39.16465,13.2063999,38.6031494,13.2063999z\"/>\n\t<path d=\"M38.6031494,21.3334007H16.253952c-0.5615005,0-1.0159006,0.4542999-1.0159006,1.0157986\n\t\tc0,0.5615005,0.4544001,1.0159016,1.0159006,1.0159016h22.3491974c0.5615005,0,1.0158997-0.454401,1.0158997-1.0159016\n\t\tC39.6190491,21.7877007,39.16465,21.3334007,38.6031494,21.3334007z\"/>\n\t<path d=\"M38.6031494,29.4603004H16.253952c-0.5615005,0-1.0159006,0.4543991-1.0159006,1.0158997\n\t\ts0.4544001,1.0158997,1.0159006,1.0158997h22.3491974c0.5615005,0,1.0158997-0.4543991,1.0158997-1.0158997\n\t\tS39.16465,29.4603004,38.6031494,29.4603004z\"/>\n\t<path d=\"M28.4444485,37.5872993H16.253952c-0.5615005,0-1.0159006,0.4543991-1.0159006,1.0158997\n\t\ts0.4544001,1.0158997,1.0159006,1.0158997h12.1904964c0.5615025,0,1.0158005-0.4543991,1.0158005-1.0158997\n\t\tS29.0059509,37.5872993,28.4444485,37.5872993z\"/>\n</g>\n<g>\n</g>\n<g>\n</g>\n<g>\n</g>\n<g>\n</g>\n<g>\n</g>\n<g>\n</g>\n<g>\n</g>\n<g>\n</g>\n<g>\n</g>\n<g>\n</g>\n<g>\n</g>\n<g>\n</g>\n<g>\n</g>\n<g>\n</g>\n<g>\n</g>\n</svg>\n\n              </div>\n            </div>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// global execution context</span>\n\n<span class=\"token comment\">// 전역 실행 컨텍스트에서 함수 객체를 하나 선언한다.</span>\n\n<span class=\"token comment\">// 선언된 함수 객체는 Heap 메모리 영역에 할당된다.</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">globalA</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>x <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>y <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\n\t<span class=\"token comment\">// _district 지역 변수에 생성된 인스턴스를 할당한다.</span>\n\t<span class=\"token comment\">// 이때 지역 변수(참조 변수)는 Heap 메모리 영역에 할당된 객체를 참조하게된다.</span>\n\n\t<span class=\"token comment\">// 단 지역 변수에 할당된 객체의 \"메모리 반환 시점\"은, 함수 종료 시점(함수 실행 컨텍스트 종료 시점)이 된다.</span>\n\n\t<span class=\"token keyword\">var</span> _district <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">globalA</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n</li>\n<li>\n<p><code class=\"language-text\">지역 변수</code>에 할당된 <code class=\"language-text\">객체</code>는 <code class=\"language-text\">Heap</code> 메모리 영역에서 <span style=\"color:#c11f1f\">반환</span>되어 보이지 않는다.</p>\n</li>\n</ul>\n<p><img src=\"http://mohwa.github.io/blog/assets/images/posts/heapSnapShot2.jpg\" alt=\"\"></p>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2>3. JS 로 Struct 구현해보기</h2>\n<ul>\n<li>\n<p>위에서 나열한 <strong>구조체</strong>의 <strong>특징</strong> 중 <strong>클래스</strong>와 <strong>본질</strong>적으로 다른 부분인, <u><strong>데이터 생성</strong></u>에 대한 부분을 JS 를 통해 구현해 보았다.</p>\n<ul>\n<li>\n<p>구조체: <strong>값</strong> 타입(<strong>Stack</strong> 메모리 영역에 할당되며, 값이 <span style=\"color:#c11f1f\">복사</span>되어 할당된다)</p>\n</li>\n<li>\n<p>클래스: <strong>참조</strong> 타입(<strong>Heap</strong> 메모리 영역에 할당되며, <span style=\"color:#c11f1f\">참조</span> 값이 할당된다)</p>\n</li>\n</ul>\n</li>\n<li>\n<p><code class=\"language-text\">구조체</code>의 특징 중 극히 일부를 구현한것이며, 타 언어에서 구현된 구조체라 할 수는 없다.</p>\n</li>\n</ul>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"32039643389580450000\"\n              data-toaster-class=\"gatsby-code-button-toaster\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text\"\n              data-toaster-text=\"Copied!\"\n              data-toaster-duration=\"3500\"\n              onClick=\"copyToClipboard(`\nfunction Struct(val){\n\n\tif (\n\t\ttypeof val === 'string' ||\n\t\ttypeof val === 'number' ||\n\t\ttypeof val === 'boolean' ||\n\t\tval === null ||\n\t\tval === undefined\n\t){\n\t\tconsole.error('primitive type value: ' + val);\n\t\treturn val;\n\t}\n\n\tvar _copy = function(val){\n\n\t\tvar ret = null;\n\t\tvar constructor = val.constructor;\n\n\t\tif (constructor === Function){\n\n\t\t\t// 함수(상황에 따라 생성자 함수가 될 수도 있다) 객체 내부 this 값을 apply 함수를 통해 초기화 시키고, 그 결과를 반환하는 함수를 생성한다.\n\t\t\tret = function \\$F(){\n\n\t\t\t\t// this === global or \\$F of instance object\n\t\t\t\treturn val.apply(this, arguments);\n\t\t\t};\n\n\t\t\t// 전달된 함수 객체의 prototype(객체 원형)을 할당한다.\n\t\t\tret.prototype = val.prototype;\n\t\t}\n\t\telse if (constructor === String || constructor === Number || constructor === Boolean) {\n\t\t\tret = new constructor(val.valueOf());\n\t\t}\n\t\telse if (constructor === Date){\n\t\t\tret = new constructor(val.getTime());\n\t\t}\n\t\telse if (constructor === Object || constructor === Array){\n\n\t\t\tret = new constructor();\n\n\t\t\tfor (var n in val){\n\n\t\t\t\tif (val.hasOwnProperty(n)){\n\t\t\t\t\tret[n] = val[n];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn ret;\n\n\t}(val) || val;\n\n\n\treturn _copy;\n}\n\n\t// 5 가지의 원시 타입 값 할당\nStruct('test'); // test\nStruct(1); // 1\nStruct(true); // true\nStruct(undefined); // undefined\nStruct(null); // null\n\n/*\n\t모든 경우(모든 타입)에 전달된 원본 값(객체)이 아닌 복사 된 값을 반환한다.\n*/\n\n/*\n 함수 객체 선언\n */\nvar \\$\\$ = function() {\n\n\tvar \\$\\$ = function(){\n\t\treturn new _\\$\\$();\n\t};\n\n\tvar _\\$\\$ = function(){\n\t\tthis.x = 1;\n\t}\n\t// 나를통해 생성될 객체 원형에 새로운 객체를 할당한다.\n\t_\\$\\$.prototype = {\n\t\tgetX: function() {\n\t\t\treturn this.x;\n\t\t}\n\t};\n\n\t\\$\\$.staticMethod = function(){};\n\n\treturn \\$\\$;\n}();\n\n/*\n 다른 유형의 함수 객체 선언\n */\nfunction Plus(x, y){\n\n\tx = x || 0;\n\ty = y || 0;\n\n\treturn parseFloat(x + y);\n}\n\nvar originalFn = \\$\\$;\nvar structFn = Struct(\\$\\$);\n\nconsole.dir(originalFn); // function\nconsole.dir(structFn); // function\n\nconsole.dir(originalFn()); // object\nconsole.dir(structFn()); // object\n\nvar originalFn1 = Plus;\nvar structFn1 = Struct(Plus);\n\nconsole.dir(originalFn1); // function\nconsole.dir(structFn1); // function\n\nconsole.dir(originalFn1(1, 3)); // 4\nconsole.dir(structFn1(2, 3)); // 5\n\nvar structStr = Struct(new String('test'));\nvar structNum = Struct(new Number(1));\n\nconsole.dir(structStr); // string object\nconsole.dir(structNum); // number object\n\nvar structObject = Struct({x: 1, y: 2});\nvar structArray = Struct([1, 2, 3]);\n\nconsole.dir(structObject); // object\nconsole.dir(structArray); // array\n\nvar structBoolean = Struct(new Boolean(false));\nconsole.dir(structBoolean); // boolean object\n\n\nvar structDate = Struct(new Date());\nconsole.dir(structDate); // date object`, `32039643389580450000`)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-tooltip=\"\"\n              >\n                <?xml version=\"1.0\" encoding=\"utf-8\"?>\n<!-- Generator: Adobe Illustrator 19.1.0, SVG Export Plug-In . SVG Version: 6.00 Build 0)  -->\n<svg version=\"1.1\" id=\"Layer_1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\"\n\t viewBox=\"0 0 64 64\" enable-background=\"new 0 0 64 64\" xml:space=\"preserve\">\n<g id=\"Text-files\">\n\t<path d=\"M53.9791489,9.1429005H50.010849c-0.0826988,0-0.1562004,0.0283995-0.2331009,0.0469999V5.0228\n\t\tC49.7777481,2.253,47.4731483,0,44.6398468,0h-34.422596C7.3839517,0,5.0793519,2.253,5.0793519,5.0228v46.8432999\n\t\tc0,2.7697983,2.3045998,5.0228004,5.1378999,5.0228004h6.0367002v2.2678986C16.253952,61.8274002,18.4702511,64,21.1954517,64\n\t\th32.783699c2.7252007,0,4.9414978-2.1725998,4.9414978-4.8432007V13.9861002\n\t\tC58.9206467,11.3155003,56.7043495,9.1429005,53.9791489,9.1429005z M7.1110516,51.8661003V5.0228\n\t\tc0-1.6487999,1.3938999-2.9909999,3.1062002-2.9909999h34.422596c1.7123032,0,3.1062012,1.3422,3.1062012,2.9909999v46.8432999\n\t\tc0,1.6487999-1.393898,2.9911003-3.1062012,2.9911003h-34.422596C8.5049515,54.8572006,7.1110516,53.5149002,7.1110516,51.8661003z\n\t\t M56.8888474,59.1567993c0,1.550602-1.3055,2.8115005-2.9096985,2.8115005h-32.783699\n\t\tc-1.6042004,0-2.9097996-1.2608986-2.9097996-2.8115005v-2.2678986h26.3541946\n\t\tc2.8333015,0,5.1379013-2.2530022,5.1379013-5.0228004V11.1275997c0.0769005,0.0186005,0.1504021,0.0469999,0.2331009,0.0469999\n\t\th3.9682999c1.6041985,0,2.9096985,1.2609005,2.9096985,2.8115005V59.1567993z\"/>\n\t<path d=\"M38.6031494,13.2063999H16.253952c-0.5615005,0-1.0159006,0.4542999-1.0159006,1.0158005\n\t\tc0,0.5615997,0.4544001,1.0158997,1.0159006,1.0158997h22.3491974c0.5615005,0,1.0158997-0.4542999,1.0158997-1.0158997\n\t\tC39.6190491,13.6606998,39.16465,13.2063999,38.6031494,13.2063999z\"/>\n\t<path d=\"M38.6031494,21.3334007H16.253952c-0.5615005,0-1.0159006,0.4542999-1.0159006,1.0157986\n\t\tc0,0.5615005,0.4544001,1.0159016,1.0159006,1.0159016h22.3491974c0.5615005,0,1.0158997-0.454401,1.0158997-1.0159016\n\t\tC39.6190491,21.7877007,39.16465,21.3334007,38.6031494,21.3334007z\"/>\n\t<path d=\"M38.6031494,29.4603004H16.253952c-0.5615005,0-1.0159006,0.4543991-1.0159006,1.0158997\n\t\ts0.4544001,1.0158997,1.0159006,1.0158997h22.3491974c0.5615005,0,1.0158997-0.4543991,1.0158997-1.0158997\n\t\tS39.16465,29.4603004,38.6031494,29.4603004z\"/>\n\t<path d=\"M28.4444485,37.5872993H16.253952c-0.5615005,0-1.0159006,0.4543991-1.0159006,1.0158997\n\t\ts0.4544001,1.0158997,1.0159006,1.0158997h12.1904964c0.5615025,0,1.0158005-0.4543991,1.0158005-1.0158997\n\t\tS29.0059509,37.5872993,28.4444485,37.5872993z\"/>\n</g>\n<g>\n</g>\n<g>\n</g>\n<g>\n</g>\n<g>\n</g>\n<g>\n</g>\n<g>\n</g>\n<g>\n</g>\n<g>\n</g>\n<g>\n</g>\n<g>\n</g>\n<g>\n</g>\n<g>\n</g>\n<g>\n</g>\n<g>\n</g>\n<g>\n</g>\n</svg>\n\n              </div>\n            </div>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">\n<span class=\"token keyword\">function</span> <span class=\"token function\">Struct</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">val</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>\n\t\t<span class=\"token keyword\">typeof</span> val <span class=\"token operator\">===</span> <span class=\"token string\">'string'</span> <span class=\"token operator\">||</span>\n\t\t<span class=\"token keyword\">typeof</span> val <span class=\"token operator\">===</span> <span class=\"token string\">'number'</span> <span class=\"token operator\">||</span>\n\t\t<span class=\"token keyword\">typeof</span> val <span class=\"token operator\">===</span> <span class=\"token string\">'boolean'</span> <span class=\"token operator\">||</span>\n\t\tval <span class=\"token operator\">===</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span>\n\t\tval <span class=\"token operator\">===</span> <span class=\"token keyword\">undefined</span>\n\t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\tconsole<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'primitive type value: '</span> <span class=\"token operator\">+</span> val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span> val<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">var</span> <span class=\"token function-variable function\">_copy</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">val</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\n\t\t<span class=\"token keyword\">var</span> ret <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">var</span> constructor <span class=\"token operator\">=</span> val<span class=\"token punctuation\">.</span>constructor<span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>constructor <span class=\"token operator\">===</span> Function<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\n\t\t\t<span class=\"token comment\">// 함수(상황에 따라 생성자 함수가 될 수도 있다) 객체 내부 this 값을 apply 함수를 통해 초기화 시키고, 그 결과를 반환하는 함수를 생성한다.</span>\n\t\t\t<span class=\"token function-variable function\">ret</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> $<span class=\"token constant\">F</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\n\t\t\t\t<span class=\"token comment\">// this === global or $F of instance object</span>\n\t\t\t\t<span class=\"token keyword\">return</span> <span class=\"token function\">val</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> arguments<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n\t\t\t<span class=\"token comment\">// 전달된 함수 객체의 prototype(객체 원형)을 할당한다.</span>\n\t\t\tret<span class=\"token punctuation\">.</span>prototype <span class=\"token operator\">=</span> val<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>constructor <span class=\"token operator\">===</span> String <span class=\"token operator\">||</span> constructor <span class=\"token operator\">===</span> Number <span class=\"token operator\">||</span> constructor <span class=\"token operator\">===</span> Boolean<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\tret <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">constructor</span><span class=\"token punctuation\">(</span>val<span class=\"token punctuation\">.</span><span class=\"token function\">valueOf</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>constructor <span class=\"token operator\">===</span> Date<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\tret <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">constructor</span><span class=\"token punctuation\">(</span>val<span class=\"token punctuation\">.</span><span class=\"token function\">getTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>constructor <span class=\"token operator\">===</span> Object <span class=\"token operator\">||</span> constructor <span class=\"token operator\">===</span> Array<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\n\t\t\tret <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> n <span class=\"token keyword\">in</span> val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\n\t\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>val<span class=\"token punctuation\">.</span><span class=\"token function\">hasOwnProperty</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\t\t\tret<span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> val<span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token punctuation\">}</span>\n\n\t\t<span class=\"token keyword\">return</span> ret<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">(</span>val<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> val<span class=\"token punctuation\">;</span>\n\n\n\t<span class=\"token keyword\">return</span> _copy<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token comment\">// 5 가지의 원시 타입 값 할당</span>\n<span class=\"token function\">Struct</span><span class=\"token punctuation\">(</span><span class=\"token string\">'test'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// test</span>\n<span class=\"token function\">Struct</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 1</span>\n<span class=\"token function\">Struct</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\n<span class=\"token function\">Struct</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">undefined</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// undefined</span>\n<span class=\"token function\">Struct</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// null</span>\n\n<span class=\"token comment\">/*\n\t모든 경우(모든 타입)에 전달된 원본 값(객체)이 아닌 복사 된 값을 반환한다.\n*/</span>\n\n<span class=\"token comment\">/*\n 함수 객체 선언\n */</span>\n<span class=\"token keyword\">var</span> <span class=\"token function-variable function\">$$</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n\t<span class=\"token keyword\">var</span> <span class=\"token function-variable function\">$$</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">_</span><span class=\"token function\">$$</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">var</span> <span class=\"token function-variable function\">_$$</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>x <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token comment\">// 나를통해 생성될 객체 원형에 새로운 객체를 할당한다.</span>\n\t<span class=\"token class-name\">_$$</span><span class=\"token punctuation\">.</span>prototype <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function-variable function\">getX</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n\t$$<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">staticMethod</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">return</span> $$<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/*\n 다른 유형의 함수 객체 선언\n */</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">Plus</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x<span class=\"token punctuation\">,</span> y</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\n\tx <span class=\"token operator\">=</span> x <span class=\"token operator\">||</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\ty <span class=\"token operator\">=</span> y <span class=\"token operator\">||</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">return</span> <span class=\"token function\">parseFloat</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">+</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">var</span> originalFn <span class=\"token operator\">=</span> $$<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> structFn <span class=\"token operator\">=</span> <span class=\"token function\">Struct</span><span class=\"token punctuation\">(</span>$$<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">dir</span><span class=\"token punctuation\">(</span>originalFn<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// function</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">dir</span><span class=\"token punctuation\">(</span>structFn<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// function</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">dir</span><span class=\"token punctuation\">(</span><span class=\"token function\">originalFn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// object</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">dir</span><span class=\"token punctuation\">(</span><span class=\"token function\">structFn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// object</span>\n\n<span class=\"token keyword\">var</span> originalFn1 <span class=\"token operator\">=</span> Plus<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> structFn1 <span class=\"token operator\">=</span> <span class=\"token function\">Struct</span><span class=\"token punctuation\">(</span>Plus<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">dir</span><span class=\"token punctuation\">(</span>originalFn1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// function</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">dir</span><span class=\"token punctuation\">(</span>structFn1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// function</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">dir</span><span class=\"token punctuation\">(</span><span class=\"token function\">originalFn1</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 4</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">dir</span><span class=\"token punctuation\">(</span><span class=\"token function\">structFn1</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 5</span>\n\n<span class=\"token keyword\">var</span> structStr <span class=\"token operator\">=</span> <span class=\"token function\">Struct</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">(</span><span class=\"token string\">'test'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> structNum <span class=\"token operator\">=</span> <span class=\"token function\">Struct</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Number</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">dir</span><span class=\"token punctuation\">(</span>structStr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// string object</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">dir</span><span class=\"token punctuation\">(</span>structNum<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// number object</span>\n\n<span class=\"token keyword\">var</span> structObject <span class=\"token operator\">=</span> <span class=\"token function\">Struct</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token literal-property property\">x</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">y</span><span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> structArray <span class=\"token operator\">=</span> <span class=\"token function\">Struct</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">dir</span><span class=\"token punctuation\">(</span>structObject<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// object</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">dir</span><span class=\"token punctuation\">(</span>structArray<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// array</span>\n\n<span class=\"token keyword\">var</span> structBoolean <span class=\"token operator\">=</span> <span class=\"token function\">Struct</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Boolean</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">dir</span><span class=\"token punctuation\">(</span>structBoolean<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// boolean object</span>\n\n\n<span class=\"token keyword\">var</span> structDate <span class=\"token operator\">=</span> <span class=\"token function\">Struct</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">dir</span><span class=\"token punctuation\">(</span>structDate<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// date object</span></code></pre></div>\n<h2>4. 정리하며</h2>\n<ul>\n<li>\n<p>그럼 언제 사용하면될까?</p>\n<ul>\n<li>\n<p>개인적인 생각으로는 이럴때가 아닌가 싶다?</p>\n<ul>\n<li>\n<p>클래스로 만들기에는 너무 간단한 구조인 경우.</p>\n<ul>\n<li>\n<p>사실 이 경우, 반드시 <strong>구조</strong> 만의 문제는 아닐 수 있다.</p>\n<ul>\n<li>만약 모든 경우에 <strong>클래스</strong>를 사용한다면, 위에서 언급한 봐와같이 <strong>객체</strong>는 <strong>Heap</strong> 영역에 <span style=\"color:#c11f1f\">할당</span>될 것이며, 결국 <strong>GC</strong> 는 그 메모리 <strong>반환</strong>을 위해 쓸때 없는 리소스를 <strong>낭비</strong>하게 될 것이다.</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p><strong>상속 구조</strong>를 만들 필요가 없는 경우.</p>\n</li>\n</ul>\n</li>\n<li>\n<p>하지만, 이 두 가지 특징 모두 <strong><span style=\"color:#c11f1f\">각 언어</span></strong>(C/C++/C# 등 구조체를 가진 모든 언어)가 가지는 **<span style=\"color:#c11f1f\">특성</span>**에 따라 충분히 변할 수 있는 부분이므로 모든 언어에 <strong>적용</strong>된다고 말할 수는 없다.</p>\n<ul>\n<li><em>간단히 말해, 특정 <code class=\"language-text\">언어</code>가 <code class=\"language-text\">구조체</code>를 어떤 방식으로 <code class=\"language-text\">구현</code>하느냐에 따라, <code class=\"language-text\">사용 범위</code>도 크게 달라질 수 있다는 말과 같다.</em></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2>5. 참고 URL</h2>\n<ul>\n<li>\n<p><a href=\"https://msdn.microsoft.com/ko-kr/library/0taef578.aspx\">C# 구조체 설명</a></p>\n</li>\n<li>\n<p><a href=\"https://msdn.microsoft.com/ko-kr/library/0b0thckt.aspx\">C# 클래스 설명</a></p>\n</li>\n<li>\n<p><a href=\"http://stackoverflow.com/questions/13266616/primitive-value-vs-reference-value\">primitive value vs reference value</a></p>\n</li>\n<li>\n<p><a href=\"http://codingnuri.com/javascript-tutorial/javascript-primitive-types-and-reference-types.html\">원시 타입과 참조 타입</a></p>\n</li>\n<li>\n<p><a href=\"https://msdn.microsoft.com/ko-kr/library/4d43ts61(v=vs.90).aspx\">값 형식 및 참조 형식(Visual C# Express)</a></p>\n</li>\n<li>\n<p><a href=\"http://davidshariff.com/blog/what-is-the-execution-context-in-javascript/\">What is the Execution Context &#x26; Stack in JavaScript?</a></p>\n</li>\n<li>\n<p><a href=\"http://stackoverflow.com/questions/11148353/javascript-scope-and-execution-context\">javascript-scope-and-execution-context</a>=</p>\n</li>\n<li>\n<p><a href=\"http://dsnight.tistory.com/50\">C언어의 메모리 구조</a></p>\n</li>\n<li>\n<p><a href=\"http://egloos.zum.com/recipes/v/5057426\">STACK, HEAP에 관한 소고</a></p>\n</li>\n<li>\n<p><a href=\"https://kldp.org/node/44714\">도대체 [구조체]가 [클래스]보다 좋은점이 뭔가요?</a></p>\n<ul>\n<li><em>개인적으로 이런 글을 좋아한다.(다양한 생각들을 들을 수 있으며, 그로인해 많은 <code class=\"language-text\">영감</code>을 얻기도 한다)</em></li>\n</ul>\n</li>\n<li>\n<p><a href=\"https://opentutorials.org/course/1720/9735\">메모리 구조</a></p>\n</li>\n<li>\n<p><a href=\"http://adibong.tistory.com/169\">프로그램과 메모리 , 스택과 힙</a></p>\n</li>\n</ul>","frontmatter":{"title":"Struct in JS","date":"August 07, 2015","description":"JavaScript 를 활용한 구조체 구현"}},"previous":null,"next":{"fields":{"slug":"/2015-08-07-interface-inJS/"},"frontmatter":{"title":"Interface in JS"}}},"pageContext":{"id":"6e272a4f-601f-5d80-92ee-9285cf6f1c82","previousPostId":null,"nextPostId":"3d858793-c6d3-5bc3-8e26-b0bf52bd3de8"}},
    "staticQueryHashes": ["2841359383","3257411868"]}