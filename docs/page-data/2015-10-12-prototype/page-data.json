{
    "componentChunkName": "component---src-templates-blog-post-js",
    "path": "/2015-10-12-prototype/",
    "result": {"data":{"site":{"siteMetadata":{"title":"Mohwa Blog"}},"markdownRemark":{"id":"aa2aec0c-61eb-5584-8a7f-10d7c25637a6","excerpt":"1. 정의 객체 지향 언어는 크게 두 가지 줄기로 나눌수 있다. 클래스 기반 언어(C++, Java, C#, Ruby, Python 등) 프로토타입 기반 언어 아래는 그나마 많이 알려진 프로토타입 기반언어를 나열해보았다. JavaScript, ActionScript, JScript…","html":"<h2>1. 정의</h2>\n<ul>\n<li>\n<p><strong>객체 지향 언어</strong>는 크게 두 가지 줄기로 나눌수 있다.</p>\n<ul>\n<li>\n<p><strong>클래스 기반 언어</strong>(C++, Java, C#, Ruby, Python 등)</p>\n</li>\n<li>\n<p><a href=\"https://ko.wikipedia.org/wiki/%ED%94%84%EB%A1%9C%ED%86%A0%ED%83%80%EC%9E%85_%EA%B8%B0%EB%B0%98_%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D\">프로토타입 기반 언어</a></p>\n<ul>\n<li>\n<p>아래는 그나마 많이 알려진 <strong>프로토타입 기반언어</strong>를 나열해보았다.</p>\n<ul>\n<li><a href=\"http://ko.wikipedia.org/wiki/%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8\">JavaScript</a>, <a href=\"http://ko.wikipedia.org/wiki/%EC%95%A1%EC%85%98%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8\">ActionScript</a>, <a href=\"https://ko.wikipedia.org/wiki/J%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8\">JScript</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p><a href=\"http://skyul.tistory.com/84\">클래스 기반 &#x26; 프로토타입 기반 객체 지향 언어</a></p>\n</li>\n</ul>\n</li>\n<li>\n<p><strong>클래스 기반 언어</strong>와 <strong>프로토타입 기반언어</strong>의 차이</p>\n<ul>\n<li>\n<p>클래스 기반 언어</p>\n<ul>\n<li>\n<p><strong>클래스 기반 언어</strong>에서는, <span style=\"color:#c11f1f\">객체의 형식이 정의된</span> <a href=\"https://msdn.microsoft.com/ko-kr/library/x9afc042.aspx\">클래스</a>라는 <strong>개념</strong>을 가진다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">\n<span class=\"token comment\">// 클래스를 선언한다.</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// Field</span>\n  <span class=\"token keyword\">public</span> string name<span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// Constructor that takes no arguments.</span>\n  <span class=\"token keyword\">public</span> <span class=\"token function\">Person</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">{</span>\n    name <span class=\"token operator\">=</span> <span class=\"token string\">\"unknown\"</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// Constructor that takes one argument.</span>\n  <span class=\"token keyword\">public</span> <span class=\"token function\">Person</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">string nm</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">{</span>\n    name <span class=\"token operator\">=</span> nm<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// Method</span>\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">SetName</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">string newName</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">{</span>\n    name <span class=\"token operator\">=</span> newName<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// person1 변수는 Person 클래스를 통해 생성된 객체를 참조하게된다.</span>\nPerson person1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n</li>\n<li>\n<p><strong>클래스 기반 언어</strong>만의 <a href=\"https://msdn.microsoft.com/ko-kr/library/ms173149.aspx\">상속</a> <strong>개념</strong>을 가진다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// Employee: 상속 클래스</span>\n<span class=\"token comment\">// Manager: 파생 클래스</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Manager</span> <span class=\"token operator\">:</span> Employee\n<span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// Employee fields, properties, methods and events are inherited</span>\n  <span class=\"token comment\">// New Manager fields, properties, methods and events go here...</span>\n<span class=\"token punctuation\">}</span>\t\t</code></pre></div>\n</li>\n<li>\n<p>[번외] 그럼 <strong>클래스 기반 언어</strong>의 <a href=\"https://docs.oracle.com/javase/7/docs/api/java/lang/Class.html\">클래스</a>는 어떻게 생성되었을까?</p>\n<ul>\n<li>\n<p><a href=\"https://kldp.org/node/63651\">아래 글은 “skyul” 님의 글을 발췌한 내용입니다</a></p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">\n프로토타입 기반 <span class=\"token constant\">OO</span>는 객체를 직접 이용하는데 비해<span class=\"token punctuation\">,</span> 클래스 기반의 <span class=\"token constant\">OO</span>는 클래스라는 틀을 이용해서 객체를 생성하죠<span class=\"token punctuation\">.</span>\n\n자연스럽게 나오는 질문은 <span class=\"token string\">\"그럼 클래스는 대체 어디서 나온 것인가?\"</span>라는 거죠<span class=\"token punctuation\">.</span>\n\n대표적 클래스 기반 <span class=\"token constant\">OO</span>인 Java는 클래스도 객체로 봅니다<span class=\"token punctuation\">.</span> 그런데 클래스가 객체면 클래스를 찍어낸 클래스가 있어야 합니다<span class=\"token punctuation\">.</span> 클래스를 찍어낸 클래스도 객체이므로<span class=\"token punctuation\">,</span> 클래스를 찍어낸 클래스를 만드는 클래스도 있어야 합니다<span class=\"token punctuation\">.</span> \n\n이렇게 무한히 반복 되기 때문에 <span class=\"token string\">\"inifnite regress problem of classes\"</span>라고 불리는 것이죠<span class=\"token punctuation\">.</span>\n\nJava는 이 문제를 java<span class=\"token punctuation\">.</span>lang<span class=\"token punctuation\">.</span>Class가 모든 클래스의 틀이라고 이야기하면서<span class=\"token punctuation\">,</span> 은근 슬쩍 넘어갔지만 여기에 숨은 논리적인 문제를 확실히 못풀고 <span class=\"token string\">\"태초에 Class가 있었다\"</span>라는 해법이 나와버리는거죠<span class=\"token punctuation\">.</span>\n\n다른 접근 방법을 취한 언어가 있는지 모르겠지만<span class=\"token punctuation\">,</span> 대부분의 클래스 기반 언어는 클래스는 second<span class=\"token operator\">-</span>order citizen으로 특별히 취급해서 찍어낼 수 있는 틀은 원래 있었다라고 얘기하게 되는거죠<span class=\"token punctuation\">.</span>\n\n그 대상이 클래스라는 거만 제외하면 접근 방법은 프로토타입 방식과 크게 다르지 않은 거고요<span class=\"token punctuation\">.</span></code></pre></div>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>프로토타입 기반 언어</p>\n<ul>\n<li>\n<p><strong>프로토타입 기반 언어</strong>에서는 <a href=\"https://msdn.microsoft.com/ko-kr/library/x9afc042.aspx\">클래스</a>라는 <strong>개념</strong>이 존재하지 않으며, 여러 종류의 <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects\">Built-in 객체</a>들이 시스템상에 존재하게된다. 또한 <strong>클래스 기반언어</strong>의 <a href=\"https://msdn.microsoft.com/ko-kr/library/ms173149.aspx\">상속</a> 개념과 달리, <span style=\"color:#c11f1f\">객체 원형</span>의 <span style=\"color:#c11f1f\">위임</span> 과정을 통해 <strong>상속</strong> 과정이 구현된다.</p>\n<ul>\n<li>\n<p><strong>프로토타입 기반 언어</strong>는 <a href=\"https://msdn.microsoft.com/ko-kr/library/x9afc042.aspx\">클래스</a>가 존재하지 않는다.</p>\n<ul>\n<li>\n<p>함수 객체는 클래스가 아닌 <strong>First-Class Objects</strong>이다.<p></p>\n</li>\n<li>\n<p>선언된 함수 객체는, <strong>프로토타입 기반 언어</strong>의 특징인, <strong>위임</strong> 과정을 통해 만들어진 객체의 <span style=\"color:#c11f1f\">원형</span>을 참조하고있다.</p>\n</li>\n<li>\n<p>즉, JS <strong>함수</strong>는 <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions\">Function</a> 생성자 함수 객체의 <span style=\"color:#c11f1f\">원형</span>(Function.prototype)을 <strong>참조</strong>하는 또 다른 <strong>함수 객체</strong>일뿐이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">\n<span class=\"token comment\">// A 함수 객체를 선언한다.</span>\n<span class=\"token keyword\">function</span> <span class=\"token constant\">A</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 선언된 A 함수 객체의 데이터 타입은 function 타입을 반환한다.</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> <span class=\"token constant\">A</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// function</span>\n\n<span class=\"token comment\">// 선언된 A 함수 객체의 생성자 함수는 Function 생성자 함수 객체를 가리키고있다.</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">dir</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">A</span><span class=\"token punctuation\">.</span>constructor<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Function</span>\n\n<span class=\"token comment\">// 선언된 A 함수 객체의 생성자 함수 객체</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">dir</span><span class=\"token punctuation\">(</span>Function<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Function</span>\n\n<span class=\"token comment\">// 선언된 A 함수 객체는 위임 과정을 통해, 자신을 만든 생성자 함수(Function) 객체의 원형(Function.prototype)을 참조하고 있다.</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">dir</span><span class=\"token punctuation\">(</span><span class=\"token constant\">A</span><span class=\"token punctuation\">.</span>__proto__<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 선언된 A 함수 객체로 위임된 원형과 Function 생성자 함수 객체의 원형 비교(동일하다)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">dir</span><span class=\"token punctuation\">(</span><span class=\"token constant\">A</span><span class=\"token punctuation\">.</span>__proto__ <span class=\"token operator\">===</span> <span class=\"token class-name\">Function</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span></code></pre></div>\n<p><img src=\"http://mohwa.github.io/blog/assets/images/posts/20151012/prototype_2.png\" alt=\"\"></p>\n</li>\n</ul>\n</li>\n<li>\n<p>JS <strong>Built-in 객체</strong> 중 하나인 <strong>Array</strong> 객체</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> fruits <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"Apple\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Banana\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 배열의 길이를 반환한다.</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>fruits<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 2</span></code></pre></div>\n</li>\n<li>\n<p>객체 원형 및 <strong>위임</strong> 과정</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// Object 생성자 함수 객체로 새로운 객체를 생성한다.</span>\n<span class=\"token keyword\">var</span> obj <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 생성된 새로운 객체</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">dir</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 새로운 객체로 위임된 Object 생성자 함수 객체의 원형</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">.</span>__proto__<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Object 생성자 함수 객체의 원형</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 새로운 객체로 위임된 원형과 Object 생성자 함수 객체의 원형 비교(동일하다)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">.</span>__proto__ <span class=\"token operator\">===</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\n\n<span class=\"token comment\">// 위임 과정을 통해 toString 메서드를 사용할 수 있다.</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">dir</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">.</span>toString<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><img src=\"http://mohwa.github.io/blog/assets/images/posts/20151012/prototype_1.png\" alt=\"\"></p>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p><strong>클래스 기반 언어</strong>는 보통 <a href=\"http://ko.wikipedia.org/wiki/%EC%9E%90%EB%A3%8C%ED%98%95_%EC%B2%B4%EA%B3%84#.EC.A0.95.EC.A0.81_.EC.A0.95.ED.98.95\">정적 언어</a>를 말하며, JS 와 같은 <a href=\"http://ko.wikipedia.org/wiki/%EC%9E%90%EB%A3%8C%ED%98%95_%EC%B2%B4%EA%B3%84#.EB.8F.99.EC.A0.81_.EC.A0.95.ED.98.95\">동적 언어</a>는 <span style=\"color:#c11f1f\">컴파일 시점</span>이 아닌 <span style=\"color:#c11f1f\">런타임 시점</span>에서 <span style=\"color:#6298c1\">정적 언어</span>가 다루는 특정 일(<a href=\"http://ko.wikipedia.org/wiki/%EC%9E%90%EB%A3%8C%ED%98%95_%EC%B2%B4%EA%B3%84#.EC.9E.90.EB.A3.8C.ED.98.95_.EA.B2.80.EC.82.AC\">자료형 검사</a>, <a href=\"https://ko.wikipedia.org/wiki/%ED%95%A8%EC%88%98_%EC%98%A4%EB%B2%84%EB%A1%9C%EB%93%9C\">함수 오버로드</a>, 동적 디스패치 등)들을 수행하게된다.</p>\n<ul>\n<li>\n<p>정적/<a href=\"http://ko.wikipedia.org/wiki/%EB%8F%99%EC%A0%81_%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D_%EC%96%B8%EC%96%B4\">동적</a> 언어란?</p>\n<ul>\n<li>\n<p>정적언어<p></p>\n<ul>\n<li>\n<p><strong>컴파일 시점</strong>에서 자료형 검사가 이루어진다.<p></p>\n</li>\n<li>\n<p><strong>컴파일 시점</strong>의 자료형 검사로 인해 <strong>런타임 시점</strong>에서는 자료형에 대한 많은 오류를 줄일 수 있다.(단 컴파일 시점에서 결정될 수 있는 자료형 정보만이 평가(검사)된다)<p></p>\n</li>\n<li>\n<p><strong>컴파일 시점</strong>에서의 자료형 검사를 반복할 필요가 없기때문에, 전체 <strong>프로그램 실행 시간</strong>이 줄어든다.<p></p>\n</li>\n</ul>\n</li>\n<li>\n<p>동적언어</p>\n<ul>\n<li>\n<p><strong>런타임 시점</strong>에서 자료형 검사가 이루어진다.<p></p>\n</li>\n<li>\n<p><strong>런타임 시점</strong>의 자료형 검사로 인해 자료형에 대한 <strong>런타임 오류</strong>가 발생할 수 있다.(빈도수가 생각보다 많을수있다)<p></p>\n</li>\n<li>\n<p>모든 <strong>런타임 객체</strong>가 자료형에 대한 정보를 가지고 있으며, 이를 통해 <a href=\"https://ko.wikipedia.org/wiki/%ED%95%A8%EC%88%98_%EC%98%A4%EB%B2%84%EB%A1%9C%EB%93%9C\">함수 오버로드</a>, <span style=\"color:#6298c1\">동적 디스패치</span> 등을 수행할 수 있다.(<a href=\"https://ko.wikipedia.org/wiki/%EB%8F%99%EC%A0%81_%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D_%EC%96%B8%EC%96%B4\">동적 언어</a>가 가지는 유연성)<p></p>\n</li>\n<li>\n<p>변수는 모든 자료형을 가질 수 있다.<p></p>\n<ul>\n<li>\n<p><strong>JS 동적 타이핑</strong><p></p>\n<ul>\n<li><em>자바스크립트는 느슨한 타입 (loosely typed) 언어, 혹은 동적 (dynamic) 언어이다. 그 말은, 변수의 타입을 미리 선언할 필요가 없다는 뜻이다. 타입은 프로그램이 처리되는 과정에서 자동으로 파악될 것이다. 또한 그 말은 같은 변수에 여러 타입의 값을 넣을 수 있다는 뜻이다.</em><p></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p><a href=\"https://developer.mozilla.org/ko/docs/Web/JavaScript/Data_structures\">자바스크립트의 자료형</a><p></p>\n</li>\n<li>\n<p><a href=\"http://pyrasis.com/book/GoForTheReallyImpatient/Unit01\">Go 언어란? 정적 타입과 동적 타입에 대한 이야기</a></p>\n</li>\n<li>\n<p><strong>런타임 시점</strong>에서 자료형 검사가 이루어진다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">\n<span class=\"token comment\">// global execution context</span>\n\n<span class=\"token comment\">// 원시 타입인 string 타입을 할당한다.</span>\n<span class=\"token keyword\">var</span> x <span class=\"token operator\">=</span> <span class=\"token string\">'str'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 원시 타입인 number 타입을 할당한다.</span>\nx <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// object 타입을 할당한다.</span>\nx <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">dir</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Object</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">dir</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// object</span>\n</code></pre></div>\n</li>\n<li>\n<p><strong>런타임 시점</strong>의 자료형 검사로 인해 자료형에 대한 <strong>런타임 오류</strong>가 발생할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">\n  <span class=\"token keyword\">var</span> num <span class=\"token operator\">=</span> <span class=\"token string\">'1'</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n    num<span class=\"token punctuation\">.</span><span class=\"token function\">toFixed</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// runtime error</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// num.toFixed is not a function</span>\n  <span class=\"token punctuation\">}</span>\n</code></pre></div>\n</li>\n<li>\n<p>모든 <strong>런타임 객체</strong>가 자료형에 대한 정보를 가지고 있으며, 이를 통해 <a href=\"https://ko.wikipedia.org/wiki/%ED%95%A8%EC%88%98_%EC%98%A4%EB%B2%84%EB%A1%9C%EB%93%9C\">함수 오버로드</a>, <span style=\"color:#6298c1\">동적 디스패치</span> 등을 수행할 수 있다.</p>\n<ul>\n<li>\n<p>JS 는 기본적으로 <strong>함수 오버로드</strong>를 지원하지 않으며, 아래와 같은 방법으로 구현 가능하다.<p></p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">\n<span class=\"token comment\">// 함수 오버로드 구현</span>\n<span class=\"token keyword\">function</span> <span class=\"token constant\">A</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\n  <span class=\"token keyword\">var</span> args <span class=\"token operator\">=</span> arguments<span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">.</span>length <span class=\"token operator\">===</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 1</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">.</span>length <span class=\"token operator\">===</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 2</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token constant\">A</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 1</span>\n<span class=\"token constant\">A</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 2</span>\n</code></pre></div>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2>2. 프로토타입 언어에서 객체를 생성하는 두 가지 방법</h2>\n<ul>\n<li>\n<p>무에서 <strong>객체</strong>를 생성하는 방법(<span style=\"color:#c11f1f\">원형</span> 객체가 없는 상태에서 객체를 생성하는 방법)</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">\t<span class=\"token comment\">// 원형 객체가 없는 상태에서 객체를 생성하는 방법(일부 브라우저를 통해 아래와 같은 무형 객체를 구현할 수 있다)</span>\n\t<span class=\"token keyword\">var</span> instance <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\tinstance<span class=\"token punctuation\">.</span>__proto__ <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n\n\tconsole<span class=\"token punctuation\">.</span><span class=\"token function\">dir</span><span class=\"token punctuation\">(</span>instance<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Object</span>\n\tconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> instance<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// object</span></code></pre></div>\n<p><img src=\"https://www.dropbox.com/s/ucpd5x23mdd1581/44.jpg?dl=1\" alt=\"\"></p>\n</li>\n<li>\n<p>유에서 객체를 생성하는 방법(<span style=\"color:#c11f1f\">원형</span> 객체가 존재하는 상태에서 객체를 생성하는 방법)</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">\t<span class=\"token comment\">// 원형 객체가 존재하는 상태에서 객체를 생성하는 방법(일반적인 위임 과정을 거친 객체)</span>\n\t<span class=\"token keyword\">var</span> instance <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n\tconsole<span class=\"token punctuation\">.</span><span class=\"token function\">dir</span><span class=\"token punctuation\">(</span>instance<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Object</span>\n\tconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> instance<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// object</span></code></pre></div>\n<p><img src=\"https://www.dropbox.com/s/8eeliasbb29qatz/45.jpg?dl=1\" alt=\"\"></p>\n</li>\n<li>\n<p>보통 <strong>프로토타입 기반 언어</strong>에는 <strong>Object 객체</strong>(Master Object)가 존재하며, 이 객체의 <span style=\"color:#c11f1f\">원형</span>에는 모든 <strong>객체</strong>가 공통적으로 필요한 <span style=\"color:#c11f1f\">특징</span>(속성, 메서드)들이 <strong>정의</strong>되어있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// A 함수 객체를 선언한다.</span>\n<span class=\"token keyword\">function</span> <span class=\"token constant\">A</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\n<span class=\"token punctuation\">}</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">dir</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">A</span><span class=\"token punctuation\">.</span>constructor<span class=\"token punctuation\">.</span>__proto__<span class=\"token punctuation\">.</span>__proto__<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Object.prototype</span>\n\n<span class=\"token keyword\">var</span> obj <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 나를 만든 생성자 함수 객체의 원형</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">dir</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">.</span>__proto__<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Object.prototype</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">dir</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Object.prototype</span></code></pre></div>\n<p><img src=\"http://mohwa.github.io/blog/assets/images/posts/20151012/prototype_3.png\" alt=\"\"></p>\n</li>\n</ul>\n<h2>3. 위임 과정에 대해</h2>\n<ul>\n<li>\n<p>JS는 <strong>프로토타입 기반 언어</strong>의 특징인 <strong>위임</strong> 과정을 따른다.</p>\n</li>\n<li>\n<p>모든 <strong>위임</strong> 과정은 <a href=\"http://ko.wikipedia.org/wiki/%EB%9F%B0%ED%83%80%EC%9E%84\">런타임</a> 시점에서 이루어진다.</p>\n</li>\n<li>\n<p><strong>위임</strong>이란 객체들간의 <span style=\"color:#c11f1f\">원형 복제 과정</span>을 말한다.</p>\n</li>\n<li>\n<p><strong>위임</strong>된 객체 <span style=\"color:#c11f1f\">원형</span>은 값(value)이 아닌 <span style=\"color:#c11f1f\">참조 값</span>(reference of value)을 갖는다.</p>\n</li>\n<li>\n<p><strong>위임</strong>된 객체 <span style=\"color:#c11f1f\">원형</span>은 해당 객체의 특징(속성, 메서드)들을 <strong>공유</strong>하기위해 사용된다.</p>\n<ul>\n<li>\n<p>A 함수 객체에 대한 <strong>위임</strong> 결과.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// A 함수 객체를 선언한다.</span>\n<span class=\"token keyword\">function</span> <span class=\"token constant\">A</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\n<span class=\"token punctuation\">}</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">dir</span><span class=\"token punctuation\">(</span><span class=\"token constant\">A</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n</li>\n<li>\n<p><strong>A</strong>: 선언된 A 함수 객체</p>\n</li>\n<li>\n<p><strong>A.prototype</strong>: 나를 통해 생성될 객체의 <span style=\"color:#c11f1f\">원형</span></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">```javascript\nconsole.log(A.prototype === new A().__proto__); // true\n```</code></pre></div>\n</li>\n<li>\n<p><strong>A.__proto__</strong>: 나를 만든 생성자 함수 객체의 <span style=\"color:#c11f1f\">원형</span></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">```javascript\nconsole.log(A.__proto__ === Function.prototype); // true\n```</code></pre></div>\n</li>\n<li>\n<p><strong>A.constructor</strong>: 나를 만든 생성자 함수 객체</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">```javascript\nconsole.log(A.constructor === Function); // true\n```</code></pre></div>\n</li>\n</ul>\n<p><img src=\"http://mohwa.github.io/blog/assets/images/posts/20151012/prototype_4.png\" alt=\"\"></p>\n<ul>\n<li>\n<p>objA 객체에 대한 <strong>위임</strong> 결과.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// A 함수 객체를 선언한다.</span>\n<span class=\"token keyword\">function</span> <span class=\"token constant\">A</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// A 생성자 함수 객체를 통해 새로운 객체를 생성한다.</span>\n<span class=\"token keyword\">var</span> objA <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">A</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">dir</span><span class=\"token punctuation\">(</span>objA<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n</li>\n<li>\n<p><strong>objA</strong>: 생성된 objA 객체</p>\n</li>\n<li>\n<p><strong>objA.__proto__</strong>: 나를 만든 생성자 함수 객체의 원형</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>objA<span class=\"token punctuation\">.</span>__proto__ <span class=\"token operator\">===</span> <span class=\"token class-name\">A</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span></code></pre></div>\n</li>\n<li>\n<p><strong>A.constructor</strong>: 나를 만든 생성자 함수 객체</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>objA<span class=\"token punctuation\">.</span>constructor <span class=\"token operator\">===</span> <span class=\"token constant\">A</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span></code></pre></div>\n<p><img src=\"http://mohwa.github.io/blog/assets/images/posts/20151012/prototype_5.png\" alt=\"\"></p>\n</li>\n</ul>\n</li>\n<li>\n<p><strong>위임</strong>받은 자식 객체는 부모 객체의 <span style=\"color:#c11f1f\">원형</span>을 참조하고 있기 때문에, 자식 객체로 부터 부모 객체의 <span style=\"color:#c11f1f\">원형</span>이 변조될 수 있다.(이로인해 아주 위험한 상황이 연출될 수 있다)</p>\n<ul>\n<li>\n<p>부모 객체: A 생성자 함수 객체</p>\n</li>\n<li>\n<p>자식 객체: objA 변수가 참조하는 객체(new A)</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">\n<span class=\"token comment\">// A 함수 객체를 선언한다.</span>\n<span class=\"token keyword\">function</span> <span class=\"token constant\">A</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">var</span> objA <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">A</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 자식 객체를 통해 부모 객체의 원형(A.prototype)을 변조한다.</span>\n<span class=\"token comment\">// objA.__proto__ === A.prototype</span>\nobjA<span class=\"token punctuation\">.</span>__proto__<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">getConstructor</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>constructor<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">dir</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">A</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function\">getConstructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// A 생성자 함수 객체</span></code></pre></div>\n</li>\n</ul>\n<p><img src=\"http://mohwa.github.io/blog/assets/images/posts/20151012/prototype_6.png\" alt=\"\"></p>\n</li>\n<li>\n<p><strong>위임</strong> 받은 자식 객체는 원하는 <strong>특징</strong>(속성, 메서드)에 도달하기위해, 각 <strong>객체</strong>들이 가진 <span style=\"color:#c11f1f\">원형</span>을 연속적으로 따라가 찾아내게된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// parent 객체는 id 속성 값을 가지고 있다.</span>\n<span class=\"token keyword\">var</span> parent <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n\tid<span class=\"token operator\">:</span> <span class=\"token string\">'parentId'</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// child1 객체는 name 속성 값을 가지고 있다.</span>\n<span class=\"token keyword\">var</span> child1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n\tname<span class=\"token operator\">:</span> <span class=\"token string\">'child1Name'</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// child2 객체는 각 속성 값을 반환받는 get 접근자 메서드를 가지고 있다.</span>\n<span class=\"token keyword\">var</span> child2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token function-variable function\">getId</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token function-variable function\">getName</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// parent 객체의 모든 특징(속성, 메서드)들을 child1 객체 원형으로 위임한다.</span>\nchild1<span class=\"token punctuation\">.</span>__proto__ <span class=\"token operator\">=</span> parent<span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// child1 객체의 모든 특징(속성, 메서드)들을 child2 객체 원형으로 위임한다.</span>\nchild2<span class=\"token punctuation\">.</span>__proto__ <span class=\"token operator\">=</span> child1<span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">dir</span><span class=\"token punctuation\">(</span>child2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>child2<span class=\"token punctuation\">.</span><span class=\"token function\">getId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// parentId</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>child2<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// child1Name</span></code></pre></div>\n<p><img src=\"http://mohwa.github.io/blog/assets/images/posts/20151012/prototype_7.png\" alt=\"\"></p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// parent 객체는 id 속성 값을 가지고 있다.</span>\n<span class=\"token keyword\">var</span> parent <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n\tid<span class=\"token operator\">:</span> <span class=\"token string\">'parentId'</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// child1 객체는 name 속성 값을 가지고 있다.</span>\n<span class=\"token keyword\">var</span> child1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n\tname<span class=\"token operator\">:</span> <span class=\"token string\">'child1Name'</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// child2 객체는 각 속성 값(id, name)과 그것들을 반환하는 get 접근자 메서드를 가지고 있다.</span>\n<span class=\"token keyword\">var</span> child2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n\tid<span class=\"token operator\">:</span> <span class=\"token string\">'child2Id'</span><span class=\"token punctuation\">,</span>\n\tname<span class=\"token operator\">:</span> <span class=\"token string\">'child2Name'</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token function-variable function\">getId</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token function-variable function\">getName</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// parent 객체의 모든 특징(속성, 메서드)들을 child1 객체 원형으로 위임한다.</span>\nchild1<span class=\"token punctuation\">.</span>__proto__ <span class=\"token operator\">=</span> parent<span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// child1 객체의 모든 특징(속성, 메서드)들을 child2 객체 원형으로 위임한다.</span>\nchild2<span class=\"token punctuation\">.</span>__proto__ <span class=\"token operator\">=</span> child1<span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">dir</span><span class=\"token punctuation\">(</span>child2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>child2<span class=\"token punctuation\">.</span><span class=\"token function\">getId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// child2Id</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>child2<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// child2Name</span></code></pre></div>\n<p><img src=\"http://mohwa.github.io/blog/assets/images/posts/20151012/prototype_8.png\" alt=\"\"></p>\n</li>\n<li>\n<p>또한, <strong>프로토타입</strong> 검색 범위는 동적으로 변경될 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> instance <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">extend</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\tinstance<span class=\"token punctuation\">.</span>__proto__ <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n\t\tx<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\t\ty<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\t\tz<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 런타임 시점에서 객체가 확장된다.</span>\n<span class=\"token function\">extend</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">dir</span><span class=\"token punctuation\">(</span>instance<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><img src=\"https://www.dropbox.com/s/1f9j861jn09w3sp/11.jpg?dl=1\" alt=\"\"></p>\n</li>\n</ul>\n<h2>4. 연쇄 과정에 대해</h2>\n<ul>\n<li>\n<p><strong>순수 프로토타입</strong>은 <strong>연쇄적 프로토타입</strong>이라고도 한다.</p>\n</li>\n<li>\n<p><strong>연쇄</strong>란 객체들간의 <span style=\"color:#c11f1f\">원형 복제 과정</span>을 말한다.</p>\n</li>\n<li>\n<p><strong>연쇄</strong>된 객체 원형은 <span style=\"color:#c11f1f\">참조 값</span>(reference of value)이 아닌 <strong>원본</strong>으로부터 <span style=\"color:#c11f1f\">복제된</span> 객체 값(value)을 갖는다.</p>\n</li>\n<li>\n<p><strong>연쇄</strong>된 자식 객체는 원본 객체로부터 <span style=\"color:#c11f1f\">복제된 원형</span>을 참조하기 때문에, 자식 객체를 통해 원본 객체의 특징들이 <strong>변조</strong>될 수 없다.</p>\n</li>\n<li>\n<p><strong>연쇄</strong>된 자식 객체는 원하는 <strong>특징</strong>(속성, 메서드)에 도달하기위해, 각 <strong>객체</strong>들이 가진 <span style=\"color:#c11f1f\">원형</span>을 연속적으로 따라가 찾아내게된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// 원본 객체</span>\n<span class=\"token keyword\">var</span> instance1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n\tid<span class=\"token operator\">:</span> <span class=\"token string\">'yanione'</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 자식 객체</span>\n<span class=\"token keyword\">var</span> instance2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n\tname<span class=\"token operator\">:</span> <span class=\"token string\">'mohwa'</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 클론 함수</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">clone</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">obj</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>obj <span class=\"token operator\">||</span> obj<span class=\"token punctuation\">.</span>constructor <span class=\"token operator\">!==</span> Object<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">var</span> clone <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> n <span class=\"token keyword\">in</span> obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\tclone<span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> obj<span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">return</span> clone<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 원본 객체를 복제한다.</span>\n<span class=\"token keyword\">var</span> cloneInstance <span class=\"token operator\">=</span> <span class=\"token function\">clone</span><span class=\"token punctuation\">(</span>instance1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 복제된 원본 객체를 자식 객체의 원형으로 연쇄한다.</span>\ninstance2<span class=\"token punctuation\">.</span>__proto__ <span class=\"token operator\">=</span> cloneInstance<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 자식 객체가 연쇄받은 원본 객체의 속성 값을 변경한다.</span>\ninstance2<span class=\"token punctuation\">.</span>__proto__<span class=\"token punctuation\">.</span>id <span class=\"token operator\">=</span> <span class=\"token string\">'mohwa'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 이전 위임 과정과 달리 자식 객체로 인해 원본 객체의 원형이 변조되지 않는다.</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>instance1<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// yanione</span></code></pre></div>\n</li>\n<li>\n<p>연쇄 방식의 프로토타입 검색 범위는 정적(연쇄 시점에 의해)으로 고정된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// 원본 객체</span>\n<span class=\"token keyword\">var</span> instance1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n\tid<span class=\"token operator\">:</span> <span class=\"token string\">'yanione'</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 자식 객체</span>\n<span class=\"token keyword\">var</span> instance2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n\tname<span class=\"token operator\">:</span> <span class=\"token string\">'mohwa'</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 클론 함수</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">clone</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">obj</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>obj <span class=\"token operator\">||</span> obj<span class=\"token punctuation\">.</span>constructor <span class=\"token operator\">!==</span> Object<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">var</span> clone <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> n <span class=\"token keyword\">in</span> obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\tclone<span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> obj<span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">return</span> clone<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 원본 객체를 복제한다.</span>\n<span class=\"token keyword\">var</span> cloneInstance <span class=\"token operator\">=</span> <span class=\"token function\">clone</span><span class=\"token punctuation\">(</span>instance1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 복제된 원본 객체를 자식 객체의 원형으로 연쇄한다.</span>\ninstance2<span class=\"token punctuation\">.</span>__proto__ <span class=\"token operator\">=</span> cloneInstance<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 원본 객체를 동적으로 확장시킨다.</span>\ninstance1<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">getId</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 자식 객체는 연쇄 시점의 복제된 원본 객체의 원형을 참조하고 있기때문에, 동적으로 확장된 원본 객체의 특성을 갖지 못한다.</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>instance2<span class=\"token punctuation\">.</span>getId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// undefined</span></code></pre></div>\n</li>\n</ul>","frontmatter":{"title":"객체 지향 언어의 두 가지 줄기","date":"October 16, 2015","description":"객체 지향 언어의 두 가지 줄기"}},"previous":{"fields":{"slug":"/2015-10-02-yo-generator/"},"frontmatter":{"title":"Yeoman-Generator"}},"next":{"fields":{"slug":"/2015-08-06-objectpool-inJS/"},"frontmatter":{"title":"ObjectPool in JS"}}},"pageContext":{"id":"aa2aec0c-61eb-5584-8a7f-10d7c25637a6","previousPostId":"d7765ed3-cbad-5556-b618-945069a1a76e","nextPostId":"1d8bda67-efcf-585b-8675-5b7868150d41"}},
    "staticQueryHashes": ["2841359383","3257411868"]}