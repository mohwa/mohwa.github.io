{
    "componentChunkName": "component---src-templates-blog-post-js",
    "path": "/2015-10-13-execution-context-inJS/",
    "result": {"data":{"site":{"siteMetadata":{"title":"Mohwa Blog"}},"markdownRemark":{"id":"8d28a6ff-4f0e-582d-bff2-ae2da0688bf3","excerpt":"이 글은 오래전 김훈민님의 블로그 글을 통해 ECMA-262-3 in detail 번역본을 정독 후, 개인적인 테스트를 통해 다시한번 정리해본 내용입니다.  Execution Context 는 일종의 Call Stack 형태를 취하고 있으며, Stack 의 바닥에는 Global…","html":"<p>이 글은 오래전 <a href=\"http://huns.me/\">김훈민</a>님의 블로그 글을 통해 <strong>ECMA-262-3 in detail</strong> 번역본을 정독 후, 개인적인 테스트를 통해 다시한번 정리해본 내용입니다.</p>\n<p><img src=\"https://www.dropbox.com/s/c9rg72fludmb0ak/84.png?dl=1\" alt=\"\"></p>\n<ul>\n<li>\n<p><strong>Execution Context</strong> 는 일종의 <a href=\"http://ko.wikipedia.org/wiki/%EC%BD%9C_%EC%8A%A4%ED%83%9D\">Call Stack</a> 형태를 취하고 있으며, Stack 의 <strong>바닥</strong>에는 Global <strong>Execution Context</strong> 가 존재하고, 가장 <strong>상위</strong>에는 <strong>현재 활성화된 Execution Context</strong> 가 놓이게된다.</p>\n<ul>\n<li><em>콜 스택(call stack) 이란 컴퓨터 과학에서 실행할 컴퓨터 프로그램 코드 정보를 저장하는 스택 자료구조이다. 또한 실행 스택(execution stack), 제어 스택 (control stack), 런 타임 스택 (run-time) 스택 혹은 기계 스택 (machine stack) 이라고도 하며 그냥 줄여서 스택 (the stack) 이라고도 한다. 소프트웨어 프로그램의 기능 수행에 있어 콜 스택의 유지 보수가 중요함에도 불구하고 구현 상세는 고급 프로그래밍 언어에서는 보통 감추어지며 자동화되어 있다.</em></li>\n</ul>\n</li>\n<li>\n<p><span style=\"color:#c11f1f\">ECStack</span> 은 <strong>Execution Context</strong> 의 <a href=\"http://ko.wikipedia.org/wiki/%EC%BD%9C_%EC%8A%A4%ED%83%9D\">Call Stack</a> 을 의미한다.</p>\n</li>\n<li>\n<p><span style=\"color:#c11f1f\">ECStack</span> 은 여러 종류의 <strong>Execution Context</strong> 들이 들어오고 나가면서(pushed or poped), 지속적으로 관리(변경)된다.</p>\n<ul>\n<li><span style=\"color:#c11f1f\">ECStack</span> 은 <strong>LIFO</strong>(Last In First out) 자료구조를 가진다.</li>\n</ul>\n</li>\n<li>\n<p><a href=\"http://mohwa.github.io/blog/javascript/2015/10/09/prototype/\">런타임 시점</a>에서 <strong>실행 코드</strong>를 만나게되면 해당되는 <strong>Execution Context</strong> 가 생성되고, 생성된 <strong>Execution Context</strong>  안에서 <strong>실행 코드</strong>가 처리된다.</p>\n<ul>\n<li>\n<p><strong>Execution Context</strong> 예 1</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">  <span class=\"token comment\">// global Execution Context(buttom)</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"global Execution Context\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">function</span> <span class=\"token function\">Func1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// active function Execution Context(top)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">function</span> <span class=\"token function\">Func2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// function Execution Context</span>\n    <span class=\"token function\">Func1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">Func2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// call function object</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">  <span class=\"token keyword\">var</span> ECStack <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token operator\">&lt;</span>Func1<span class=\"token operator\">></span> active <span class=\"token keyword\">function</span> Execution Context<span class=\"token punctuation\">,</span>\n    <span class=\"token operator\">&lt;</span>Func2<span class=\"token operator\">></span> <span class=\"token keyword\">function</span> Execution Context<span class=\"token punctuation\">,</span>\n    global Execution Context\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">  <span class=\"token comment\">// ECStack [생성 순서]</span>\n  <span class=\"token number\">1.</span> global Execution Context\n  <span class=\"token number\">2.</span> <span class=\"token operator\">&lt;</span>Func2<span class=\"token operator\">></span> functional Execution Context\n  <span class=\"token number\">3.</span> <span class=\"token operator\">&lt;</span>Func1<span class=\"token operator\">></span> active functional Execution Context\n\n  <span class=\"token comment\">// ECStack [소멸 순서]</span>\n  <span class=\"token number\">1.</span> <span class=\"token operator\">&lt;</span>Func1<span class=\"token operator\">></span> active functional Execution Context\n  <span class=\"token number\">2.</span> <span class=\"token operator\">&lt;</span>Func2<span class=\"token operator\">></span> functional Execution Context\n  <span class=\"token number\">3.</span> global Execution Context</code></pre></div>\n</li>\n<li>\n<p><strong>Execution Context</strong> 예 2(재귀 호출)</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">  <span class=\"token comment\">// global Execution Context</span>\n  <span class=\"token keyword\">function</span> <span class=\"token constant\">A</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\n    <span class=\"token comment\">// function Execution Context</span>\n\n    <span class=\"token comment\">// 전달된 함수 매개변수의 갯수</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>arguments<span class=\"token punctuation\">.</span>length <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arguments<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 1</span>\n      <span class=\"token comment\">// call function object recursively</span>\n      arguments<span class=\"token punctuation\">.</span><span class=\"token function\">callee</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token constant\">A</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// call function object</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">  <span class=\"token keyword\">var</span> ECStack <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token operator\">&lt;</span><span class=\"token constant\">A</span><span class=\"token operator\">></span> active <span class=\"token keyword\">function</span> Execution Context <span class=\"token operator\">-</span> recursively<span class=\"token punctuation\">,</span>\n    <span class=\"token operator\">&lt;</span><span class=\"token constant\">A</span><span class=\"token operator\">></span> <span class=\"token keyword\">function</span> Execution Context<span class=\"token punctuation\">,</span>\n    global Execution Context\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">  <span class=\"token comment\">// ECStack [생성 순서]</span>\n  <span class=\"token number\">1.</span> global Execution Context\n  <span class=\"token number\">2.</span> <span class=\"token operator\">&lt;</span><span class=\"token constant\">A</span><span class=\"token operator\">></span> functional Execution Context\n  <span class=\"token number\">3.</span> <span class=\"token operator\">&lt;</span><span class=\"token constant\">A</span><span class=\"token operator\">></span> active <span class=\"token keyword\">function</span> Execution Context <span class=\"token operator\">-</span> recursively\n\n  <span class=\"token comment\">// ECStack [소멸 순서]</span>\n  <span class=\"token number\">1.</span> <span class=\"token operator\">&lt;</span><span class=\"token constant\">A</span><span class=\"token operator\">></span> active <span class=\"token keyword\">function</span> Execution Context <span class=\"token operator\">-</span> recursively\n  <span class=\"token number\">2.</span> <span class=\"token operator\">&lt;</span><span class=\"token constant\">A</span><span class=\"token operator\">></span> functional Execution Context\n  <span class=\"token number\">3.</span> global Execution Context</code></pre></div>\n</li>\n<li>\n<p><strong>Execution Context</strong> 예 3(생성자 함수 호출)</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">\n<span class=\"token comment\">// global Execution Context</span>\n<span class=\"token keyword\">function</span> <span class=\"token constant\">A</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\n  <span class=\"token comment\">// A function Execution Context</span>\n<span class=\"token punctuation\">}</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">dir</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">A</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// create instance</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">\n  <span class=\"token keyword\">var</span> ECStack <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token operator\">&lt;</span><span class=\"token constant\">A</span><span class=\"token operator\">></span> active <span class=\"token keyword\">function</span> Execution Context<span class=\"token punctuation\">,</span>\n    global Execution Context\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">  <span class=\"token comment\">// ECStack [생성 순서]</span>\n  <span class=\"token number\">1.</span> global Execution Context\n  <span class=\"token number\">2.</span> <span class=\"token operator\">&lt;</span><span class=\"token constant\">A</span><span class=\"token operator\">></span> active <span class=\"token keyword\">function</span> Execution Context\n\n  <span class=\"token comment\">// ECStack [소멸 순서]</span>\n  <span class=\"token number\">1.</span> <span class=\"token operator\">&lt;</span><span class=\"token constant\">A</span><span class=\"token operator\">></span> active <span class=\"token keyword\">function</span> Execution Context\n  <span class=\"token number\">2.</span> global Execution Context</code></pre></div>\n</li>\n</ul>\n</li>\n</ul>\n<h2>참고 URL</h2>\n<ul>\n<li>\n<p><a href=\"http://dmitrysoshnikov.com/ecmascript/chapter-1-execution-contexts/\">ECMA-262-3 IN DETAIL. CHAPTER 1. EXECUTION CONTEXTS</a></p>\n</li>\n<li>\n<p><a href=\"http://huns.me/development/159\">ECMA-262-3 IN DETAIL. CHAPTER 1. EXECUTION CONTEXT 번역 글</a></p>\n</li>\n<li>\n<p><a href=\"http://davidshariff.com/blog/what-is-the-execution-context-in-javascript/\">What is the Execution Context &#x26; Stack in JavaScript?</a></p>\n</li>\n<li>\n<p><a href=\"http://www.yusufaytas.com/javascript-execution-context/\">JavaScript Execution Context</a></p>\n</li>\n</ul>","frontmatter":{"title":"Execution Context in JS","date":"October 13, 2015","description":"JavaScript 실행 컨텍스트"}},"previous":{"fields":{"slug":"/2015-10-11-scope-chain-inJS/"},"frontmatter":{"title":"Scope Chain 그리고 Closure"}},"next":{"fields":{"slug":"/2015-10-14-this-inJS/"},"frontmatter":{"title":"This in JS"}}},"pageContext":{"id":"8d28a6ff-4f0e-582d-bff2-ae2da0688bf3","previousPostId":"bd389aae-3ed9-5fcf-9f74-86c239e2648b","nextPostId":"818b3dc9-0786-54e2-8d5b-34b9f1cb575d"}},
    "staticQueryHashes": ["2841359383","3257411868"]}